// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Compute.Batch
{
    /// <summary> The Pool service client. </summary>
    public partial class PoolClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://batch.core.windows.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _batchUrl;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PoolClient for mocking. </summary>
        protected PoolClient()
        {
        }

        /// <summary> Initializes a new instance of PoolClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="batchUrl"> The base URL for all Azure Batch service requests. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal PoolClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, string batchUrl, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _batchUrl = batchUrl;
            _apiVersion = apiVersion;
        }

        /// <summary> Gets lifetime summary statistics for all of the Pools in the specified Account. </summary>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAllLifetimeStatisticsAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.GetAllLifetimeStatisticsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// ]]></code>
        /// This sample shows how to call GetAllLifetimeStatisticsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.GetAllLifetimeStatisticsAsync(1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("usageStats").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Statistics are aggregated across all Pools that have ever existed in the Account, from Account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PoolStatistics</c>:
        /// <code>{
        ///   url: string, # Required. The URL for the statistics.
        ///   startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///   lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///   usageStats: {
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     dedicatedCoreTime: string (duration ISO 8601 Format), # Required. The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        ///   }, # Optional. Statistics related to Pool usage information.
        ///   resourceStats: {
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     avgCPUPercentage: number, # Required. The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        ///     avgMemoryGiB: number, # Required. The average memory usage in GiB across all Compute Nodes in the Pool.
        ///     peakMemoryGiB: number, # Required. The peak memory usage in GiB across all Compute Nodes in the Pool.
        ///     avgDiskGiB: number, # Required. The average used disk space in GiB across all Compute Nodes in the Pool.
        ///     peakDiskGiB: number, # Required. The peak used disk space in GiB across all Compute Nodes in the Pool.
        ///     diskReadIOps: number, # Required. The total number of disk read operations across all Compute Nodes in the Pool.
        ///     diskWriteIOps: number, # Required. The total number of disk write operations across all Compute Nodes in the Pool.
        ///     diskReadGiB: number, # Required. The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        ///     diskWriteGiB: number, # Required. The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        ///     networkReadGiB: number, # Required. The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        ///     networkWriteGiB: number, # Required. The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        ///   }, # Optional. Statistics related to resource consumption by Compute Nodes in a Pool.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAllLifetimeStatisticsAsync(int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PoolClient.GetAllLifetimeStatistics");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllLifetimeStatisticsRequest(timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets lifetime summary statistics for all of the Pools in the specified Account. </summary>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAllLifetimeStatistics and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.GetAllLifetimeStatistics();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// ]]></code>
        /// This sample shows how to call GetAllLifetimeStatistics with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.GetAllLifetimeStatistics(1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("usageStats").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
        /// Console.WriteLine(result.GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Statistics are aggregated across all Pools that have ever existed in the Account, from Account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PoolStatistics</c>:
        /// <code>{
        ///   url: string, # Required. The URL for the statistics.
        ///   startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///   lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///   usageStats: {
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     dedicatedCoreTime: string (duration ISO 8601 Format), # Required. The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        ///   }, # Optional. Statistics related to Pool usage information.
        ///   resourceStats: {
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     avgCPUPercentage: number, # Required. The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        ///     avgMemoryGiB: number, # Required. The average memory usage in GiB across all Compute Nodes in the Pool.
        ///     peakMemoryGiB: number, # Required. The peak memory usage in GiB across all Compute Nodes in the Pool.
        ///     avgDiskGiB: number, # Required. The average used disk space in GiB across all Compute Nodes in the Pool.
        ///     peakDiskGiB: number, # Required. The peak used disk space in GiB across all Compute Nodes in the Pool.
        ///     diskReadIOps: number, # Required. The total number of disk read operations across all Compute Nodes in the Pool.
        ///     diskWriteIOps: number, # Required. The total number of disk write operations across all Compute Nodes in the Pool.
        ///     diskReadGiB: number, # Required. The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        ///     diskWriteGiB: number, # Required. The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        ///     networkReadGiB: number, # Required. The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        ///     networkWriteGiB: number, # Required. The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        ///   }, # Optional. Statistics related to resource consumption by Compute Nodes in a Pool.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAllLifetimeStatistics(int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("PoolClient.GetAllLifetimeStatistics");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllLifetimeStatisticsRequest(timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a Pool to the specified Account. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call AddAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.AddAsync(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call AddAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     id = "<id>",
        ///     displayName = "<displayName>",
        ///     vmSize = "<vmSize>",
        ///     cloudServiceConfiguration = new {
        ///         osFamily = "<osFamily>",
        ///         osVersion = "<osVersion>",
        ///     },
        ///     virtualMachineConfiguration = new {
        ///         imageReference = new {
        ///             publisher = "<publisher>",
        ///             offer = "<offer>",
        ///             sku = "<sku>",
        ///             version = "<version>",
        ///             virtualMachineImageId = "<virtualMachineImageId>",
        ///         },
        ///         nodeAgentSKUId = "<nodeAgentSKUId>",
        ///         windowsConfiguration = new {
        ///             enableAutomaticUpdates = true,
        ///         },
        ///         dataDisks = new[] {
        ///             new {
        ///                 lun = 1234,
        ///                 caching = "none",
        ///                 diskSizeGB = 1234,
        ///                 storageAccountType = "standard_lrs",
        ///             }
        ///         },
        ///         licenseType = "<licenseType>",
        ///         containerConfiguration = new {
        ///             type = "<type>",
        ///             containerImageNames = new[] {
        ///                 "<String>"
        ///             },
        ///             containerRegistries = new[] {
        ///                 new {
        ///                     username = "<username>",
        ///                     password = "<password>",
        ///                     registryServer = "<registryServer>",
        ///                     identityReference = new {
        ///                         resourceId = "<resourceId>",
        ///                     },
        ///                 }
        ///             },
        ///         },
        ///         diskEncryptionConfiguration = new {
        ///             targets = new[] {
        ///                 "osdisk"
        ///             },
        ///         },
        ///         nodePlacementConfiguration = new {
        ///             policy = "regional",
        ///         },
        ///         extensions = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 publisher = "<publisher>",
        ///                 type = "<type>",
        ///                 typeHandlerVersion = "<typeHandlerVersion>",
        ///                 autoUpgradeMinorVersion = true,
        ///                 settings = new {},
        ///                 protectedSettings = new {},
        ///                 provisionAfterExtensions = new[] {
        ///                     "<String>"
        ///                 },
        ///             }
        ///         },
        ///         osDisk = new {
        ///             ephemeralOSDiskSettings = new {
        ///                 placement = "<placement>",
        ///             },
        ///         },
        ///     },
        ///     resizeTimeout = PT1H23M45S,
        ///     targetDedicatedNodes = 1234,
        ///     targetLowPriorityNodes = 1234,
        ///     enableAutoScale = true,
        ///     autoScaleFormula = "<autoScaleFormula>",
        ///     autoScaleEvaluationInterval = PT1H23M45S,
        ///     enableInterNodeCommunication = true,
        ///     networkConfiguration = new {
        ///         subnetId = "<subnetId>",
        ///         dynamicVNetAssignmentScope = "none",
        ///         endpointConfiguration = new {
        ///             inboundNATPools = new[] {
        ///                 new {
        ///                     name = "<name>",
        ///                     protocol = "tcp",
        ///                     backendPort = 1234,
        ///                     frontendPortRangeStart = 1234,
        ///                     frontendPortRangeEnd = 1234,
        ///                     networkSecurityGroupRules = new[] {
        ///                         new {
        ///                             priority = 1234,
        ///                             access = "allow",
        ///                             sourceAddressPrefix = "<sourceAddressPrefix>",
        ///                             sourcePortRanges = new[] {
        ///                                 "<String>"
        ///                             },
        ///                         }
        ///                     },
        ///                 }
        ///             },
        ///         },
        ///         publicIPAddressConfiguration = new {
        ///             provision = "batchmanaged",
        ///             ipAddressIds = new[] {
        ///                 "<String>"
        ///             },
        ///         },
        ///     },
        ///     startTask = new {
        ///         commandLine = "<commandLine>",
        ///         containerSettings = new {
        ///             containerRunOptions = "<containerRunOptions>",
        ///             imageName = "<imageName>",
        ///             registry = new {
        ///                 username = "<username>",
        ///                 password = "<password>",
        ///                 registryServer = "<registryServer>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             },
        ///             workingDirectory = "taskWorkingDirectory",
        ///         },
        ///         resourceFiles = new[] {
        ///             new {
        ///                 autoStorageContainerName = "<autoStorageContainerName>",
        ///                 storageContainerUrl = "<storageContainerUrl>",
        ///                 httpUrl = "<httpUrl>",
        ///                 blobPrefix = "<blobPrefix>",
        ///                 filePath = "<filePath>",
        ///                 fileMode = "<fileMode>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             }
        ///         },
        ///         environmentSettings = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 value = "<value>",
        ///             }
        ///         },
        ///         userIdentity = new {
        ///             username = "<username>",
        ///             autoUser = new {
        ///                 scope = "task",
        ///                 elevationLevel = "nonadmin",
        ///             },
        ///         },
        ///         maxTaskRetryCount = 1234,
        ///         waitForSuccess = true,
        ///     },
        ///     certificateReferences = new[] {
        ///         new {
        ///             thumbprint = "<thumbprint>",
        ///             thumbprintAlgorithm = "<thumbprintAlgorithm>",
        ///             storeLocation = "currentuser",
        ///             storeName = "<storeName>",
        ///             visibility = new[] {
        ///                 "starttask"
        ///             },
        ///         }
        ///     },
        ///     applicationPackageReferences = new[] {
        ///         new {
        ///             applicationId = "<applicationId>",
        ///             version = "<version>",
        ///         }
        ///     },
        ///     applicationLicenses = new[] {
        ///         "<String>"
        ///     },
        ///     taskSlotsPerNode = 1234,
        ///     taskSchedulingPolicy = new {
        ///         nodeFillType = "spread",
        ///     },
        ///     userAccounts = new[] {
        ///         new {
        ///             name = "<name>",
        ///             password = "<password>",
        ///             elevationLevel = "nonadmin",
        ///             linuxUserConfiguration = new {
        ///                 uid = 1234,
        ///                 gid = 1234,
        ///                 sshPrivateKey = "<sshPrivateKey>",
        ///             },
        ///             windowsUserConfiguration = new {
        ///                 loginMode = "batch",
        ///             },
        ///         }
        ///     },
        ///     metadata = new[] {
        ///         new {
        ///             name = "<name>",
        ///             value = "<value>",
        ///         }
        ///     },
        ///     mountConfiguration = new[] {
        ///         new {
        ///             azureBlobFileSystemConfiguration = new {
        ///                 accountName = "<accountName>",
        ///                 containerName = "<containerName>",
        ///                 accountKey = "<accountKey>",
        ///                 sasKey = "<sasKey>",
        ///                 blobfuseOptions = "<blobfuseOptions>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             },
        ///             nfsMountConfiguration = new {
        ///                 source = "<source>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///             },
        ///             cifsMountConfiguration = new {
        ///                 username = "<username>",
        ///                 source = "<source>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///                 password = "<password>",
        ///             },
        ///             azureFileShareConfiguration = new {
        ///                 accountName = "<accountName>",
        ///                 azureFileUrl = "<azureFileUrl>",
        ///                 accountKey = "<accountKey>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///             },
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.AddAsync(RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// When naming Pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Pool</c>:
        /// <code>{
        ///   id: string, # Optional. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
        ///   displayName: string, # Optional. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        ///   url: string, # Optional. The URL of the Pool.
        ///   eTag: string, # Optional. This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime.
        ///   lastModified: string (ISO 8601 Format), # Optional. This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
        ///   creationTime: string (ISO 8601 Format), # Optional. The creation time of the Pool.
        ///   state: &quot;active&quot; | &quot;deleting&quot;, # Optional. The current state of the Pool.
        ///   stateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current state.
        ///   allocationState: &quot;steady&quot; | &quot;resizing&quot; | &quot;stopping&quot;, # Optional. Whether the Pool is resizing.
        ///   allocationStateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current allocation state.
        ///   vmSize: string, # Optional. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        ///   cloudServiceConfiguration: {
        ///     osFamily: string, # Required. Possible values are:
        /// 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1.
        /// 3 - OS Family 3, equivalent to Windows Server 2012.
        /// 4 - OS Family 4, equivalent to Windows Server 2012 R2.
        /// 5 - OS Family 5, equivalent to Windows Server 2016.
        /// 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        ///     osVersion: string, # Optional. The default value is * which specifies the latest operating system version for the specified OS family.
        ///   }, # Optional. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to &apos;UserSubscription&apos;.
        ///   virtualMachineConfiguration: {
        ///     imageReference: {
        ///       publisher: string, # Optional. For example, Canonical or MicrosoftWindowsServer.
        ///       offer: string, # Optional. For example, UbuntuServer or WindowsServer.
        ///       sku: string, # Optional. For example, 18.04-LTS or 2019-Datacenter.
        ///       version: string, # Optional. A value of &apos;latest&apos; can be specified to select the latest version of an Image. If omitted, the default is &apos;latest&apos;.
        ///       virtualMachineImageId: string, # Optional. This property is mutually exclusive with other ImageReference properties. The Shared Image Gallery Image must have replicas in the same region and must be in the same subscription as the Azure Batch account. If the image version is not specified in the imageId, the latest version will be used. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        ///       exactVersion: string, # Optional. The specific version of the platform image or marketplace image used to create the node. This read-only field differs from &apos;version&apos; only if the value specified for &apos;version&apos; when the pool was created was &apos;latest&apos;.
        ///     }, # Required. A reference to an Azure Virtual Machines Marketplace Image or a Shared Image Gallery Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the &apos;List Supported Images&apos; operation.
        ///     nodeAgentSKUId: string, # Required. The Batch Compute Node agent is a program that runs on each Compute Node in the Pool, and provides the command-and-control interface between the Compute Node and the Batch service. There are different implementations of the Compute Node agent, known as SKUs, for different operating systems. You must specify a Compute Node agent SKU which matches the selected Image reference. To get the list of supported Compute Node agent SKUs along with their list of verified Image references, see the &apos;List supported Compute Node agent SKUs&apos; operation.
        ///     windowsConfiguration: {
        ///       enableAutomaticUpdates: boolean, # Optional. If omitted, the default value is true.
        ///     }, # Optional. This property must not be specified if the imageReference property specifies a Linux OS Image.
        ///     dataDisks: [
        ///       {
        ///         lun: number, # Required. The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
        ///         caching: &quot;none&quot; | &quot;readonly&quot; | &quot;readwrite&quot;, # Optional. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        ///         diskSizeGB: number, # Required. The initial disk size in gigabytes.
        ///         storageAccountType: &quot;standard_lrs&quot; | &quot;premium_lrs&quot;, # Optional. If omitted, the default is &quot;standard_lrs&quot;.
        ///       }
        ///     ], # Optional. This property must be specified if the Compute Nodes in the Pool need to have empty data disks attached to them. This cannot be updated. Each Compute Node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the Compute Node is removed from the Pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
        ///     licenseType: string, # Optional. This only applies to Images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the Compute Nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        ///     containerConfiguration: {
        ///       type: string, # Required. The container technology to be used.
        ///       containerImageNames: [string], # Optional. This is the full Image reference, as would be specified to &quot;docker pull&quot;. An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
        ///       containerRegistries: [
        ///         {
        ///           username: string, # Optional. The user name to log into the registry server.
        ///           password: string, # Optional. The password to log into the registry server.
        ///           registryServer: string, # Optional. If omitted, the default is &quot;docker.io&quot;.
        ///           identityReference: {
        ///             resourceId: string, # Optional. The ARM resource id of the user assigned identity.
        ///           }, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///         }
        ///       ], # Optional. If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
        ///     }, # Optional. If specified, setup is performed on each Compute Node in the Pool to allow Tasks to run in containers. All regular Tasks and Job manager Tasks run on this Pool must specify the containerSettings property, and all other Tasks may specify it.
        ///     diskEncryptionConfiguration: {
        ///       targets: [&quot;osdisk&quot; | &quot;temporarydisk&quot;], # Optional. If omitted, no disks on the compute nodes in the pool will be encrypted. On Linux pool, only &quot;TemporaryDisk&quot; is supported; on Windows pool, &quot;OsDisk&quot; and &quot;TemporaryDisk&quot; must be specified.
        ///     }, # Optional. If specified, encryption is performed on each node in the pool during node provisioning.
        ///     nodePlacementConfiguration: {
        ///       policy: &quot;regional&quot; | &quot;zonal&quot;, # Optional. Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.
        ///     }, # Optional. This configuration will specify rules on how nodes in the pool will be physically allocated.
        ///     extensions: [
        ///       {
        ///         name: string, # Required. The name of the virtual machine extension.
        ///         publisher: string, # Required. The name of the extension handler publisher.
        ///         type: string, # Required. The type of the extension.
        ///         typeHandlerVersion: string, # Optional. The version of script handler.
        ///         autoUpgradeMinorVersion: boolean, # Optional. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        ///         settings: AnyObject, # Optional. JSON formatted public settings for the extension.
        ///         protectedSettings: AnyObject, # Optional. The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. 
        ///         provisionAfterExtensions: [string], # Optional. Collection of extension names after which this extension needs to be provisioned.
        ///       }
        ///     ], # Optional. If specified, the extensions mentioned in this configuration will be installed on each node.
        ///     osDisk: {
        ///       ephemeralOSDiskSettings: {
        ///         placement: string, # Optional. This property can be used by user in the request to choose the location e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.
        ///       }, # Optional. Specifies the ephemeral Disk Settings for the operating system disk used by the compute node (VM).
        ///     }, # Optional. Settings for the operating system disk of the compute node (VM).
        ///   }, # Optional. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
        ///   resizeErrors: [
        ///     {
        ///       code: string, # Optional. An identifier for the Pool resize error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the Pool resize error, intended to be suitable for display in a user interface.
        ///       values: [
        ///         {
        ///           name: string, # Optional. The name in the name-value pair.
        ///           value: string, # Optional. The value in the name-value pair.
        ///         }
        ///       ], # Optional. A list of additional error details related to the Pool resize error.
        ///     }
        ///   ], # Optional. This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady.
        ///   currentDedicatedNodes: number, # Optional. The number of dedicated Compute Nodes currently in the Pool.
        ///   currentLowPriorityNodes: number, # Optional. Spot/Low-priority Compute Nodes which have been preempted are included in this count.
        ///   targetDedicatedNodes: number, # Optional. The desired number of dedicated Compute Nodes in the Pool.
        ///   targetLowPriorityNodes: number, # Optional. The desired number of Spot/Low-priority Compute Nodes in the Pool.
        ///   enableAutoScale: boolean, # Optional. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.
        ///   autoScaleFormula: string, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleEvaluationInterval: string (duration ISO 8601 Format), # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleRun: {
        ///     timestamp: string (ISO 8601 Format), # Required. The time at which the autoscale formula was last evaluated.
        ///     results: string, # Optional. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        ///     error: {
        ///       code: string, # Optional. An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the autoscale error, intended to be suitable for display in a user interface.
        ///       values: [NameValuePair], # Optional. A list of additional error details related to the autoscale error.
        ///     }, # Optional. An error that occurred when executing or evaluating a Pool autoscale formula.
        ///   }, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   enableInterNodeCommunication: boolean, # Optional. This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool.
        ///   networkConfiguration: {
        ///     subnetId: string, # Optional. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn&apos;t have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The &apos;MicrosoftAzureBatch&apos; service principal must have the &apos;Classic Virtual Machine Contributor&apos; Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks (&apos;Microsoft.Network/virtualNetworks&apos;) are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        ///     dynamicVNetAssignmentScope: &quot;none&quot; | &quot;job&quot;, # Optional. The scope of dynamic vnet assignment.
        ///     endpointConfiguration: {
        ///       inboundNATPools: [
        ///         {
        ///           name: string, # Required. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
        ///           protocol: &quot;tcp&quot; | &quot;udp&quot;, # Required. The protocol of the endpoint.
        ///           backendPort: number, # Required. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeStart: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeEnd: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           networkSecurityGroupRules: [
        ///             {
        ///               priority: number, # Required. Priorities within a Pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
        ///               access: &quot;allow&quot; | &quot;deny&quot;, # Required. The action that should be taken for a specified IP address, subnet range or tag.
        ///               sourceAddressPrefix: string, # Required. Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
        ///               sourcePortRanges: [string], # Optional. Valid values are &apos;*&apos; (for all ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0 to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port). If any other values are provided the request fails with HTTP status code 400. The default value is &apos;*&apos;.
        ///             }
        ///           ], # Optional. The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
        ///         }
        ///       ], # Required. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        ///     }, # Optional. Pool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
        ///     publicIPAddressConfiguration: {
        ///       provision: &quot;batchmanaged&quot; | &quot;usermanaged&quot; | &quot;nopublicipaddresses&quot;, # Optional. The default value is BatchManaged.
        ///       ipAddressIds: [string], # Optional. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        ///     }, # Optional. Public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
        ///   }, # Optional. The network configuration for a Pool.
        ///   startTask: {
        ///     commandLine: string, # Required. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using &quot;cmd /c MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        ///     containerSettings: {
        ///       containerRunOptions: string, # Optional. These additional options are supplied as arguments to the &quot;docker create&quot; command, in addition to those controlled by the Batch Service.
        ///       imageName: string, # Required. This is the full Image reference, as would be specified to &quot;docker pull&quot;. If no tag is provided as part of the Image name, the tag &quot;:latest&quot; is used as a default.
        ///       registry: ContainerRegistry, # Optional. This setting can be omitted if was already provided at Pool creation.
        ///       workingDirectory: &quot;taskWorkingDirectory&quot; | &quot;containerImageDefault&quot;, # Optional. The default is &apos;taskWorkingDirectory&apos;.
        ///     }, # Optional. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
        ///         storageContainerUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access.
        ///         httpUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access.
        ///         blobPrefix: string, # Optional. The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        ///         filePath: string, # Optional. If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task&apos;s working directory (for example by using &apos;..&apos;).
        ///         fileMode: string, # Optional. This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }
        ///     ], # Optional. Files listed under this element are located in the Task&apos;s working directory.
        ///     environmentSettings: [
        ///       {
        ///         name: string, # Required. The name of the environment variable.
        ///         value: string, # Optional. The value of the environment variable.
        ///       }
        ///     ], # Optional. A list of environment variable settings for the StartTask.
        ///     userIdentity: {
        ///       username: string, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///       autoUser: {
        ///         scope: &quot;task&quot; | &quot;pool&quot;, # Optional. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.
        ///         elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       }, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///     }, # Optional. If omitted, the Task runs as a non-administrative user unique to the Task.
        ///     maxTaskRetryCount: number, # Optional. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)
        ///     waitForSuccess: boolean, # Optional. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        ///   }, # Optional. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
        ///   certificateReferences: [
        ///     {
        ///       thumbprint: string, # Required. The thumbprint of the Certificate.
        ///       thumbprintAlgorithm: string, # Required. The algorithm with which the thumbprint is associated. This must be sha1.
        ///       storeLocation: &quot;currentuser&quot; | &quot;localmachine&quot;, # Optional. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///       storeName: string, # Optional. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
        ///       visibility: [&quot;starttask&quot; | &quot;task&quot; | &quot;remoteuser&quot;], # Optional. You can specify more than one visibility in this collection. The default is all Accounts.
        ///     }
        ///   ], # Optional. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///   applicationPackageReferences: [
        ///     {
        ///       applicationId: string, # Required. The ID of the application to deploy.
        ///       version: string, # Optional. If this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error.
        ///     }
        ///   ], # Optional. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
        ///   applicationLicenses: [string], # Optional. The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.
        ///   taskSlotsPerNode: number, # Optional. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        ///   taskSchedulingPolicy: {
        ///     nodeFillType: &quot;spread&quot; | &quot;pack&quot;, # Required. If not specified, the default is spread.
        ///   }, # Optional. If not specified, the default is spread.
        ///   userAccounts: [
        ///     {
        ///       name: string, # Required. The name of the user Account.
        ///       password: string, # Required. The password for the user Account.
        ///       elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       linuxUserConfiguration: {
        ///         uid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
        ///         gid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
        ///         sshPrivateKey: string, # Optional. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool&apos;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&apos;s .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user&apos;s .ssh directory is done).
        ///       }, # Optional. This property is ignored if specified on a Windows Pool. If not specified, the user is created with the default options.
        ///       windowsUserConfiguration: {
        ///         loginMode: &quot;batch&quot; | &quot;interactive&quot;, # Optional. The default value for VirtualMachineConfiguration Pools is &apos;batch&apos; and for CloudServiceConfiguration Pools is &apos;interactive&apos;.
        ///       }, # Optional. This property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
        ///     }
        ///   ], # Optional. The list of user Accounts to be created on each Compute Node in the Pool.
        ///   metadata: [
        ///     {
        ///       name: string, # Required. The name of the metadata item.
        ///       value: string, # Required. The value of the metadata item.
        ///     }
        ///   ], # Optional. A list of name-value pairs associated with the Pool as metadata.
        ///   stats: {
        ///     url: string, # Required. The URL for the statistics.
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     usageStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       dedicatedCoreTime: string (duration ISO 8601 Format), # Required. The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        ///     }, # Optional. Statistics related to Pool usage information.
        ///     resourceStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       avgCPUPercentage: number, # Required. The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        ///       avgMemoryGiB: number, # Required. The average memory usage in GiB across all Compute Nodes in the Pool.
        ///       peakMemoryGiB: number, # Required. The peak memory usage in GiB across all Compute Nodes in the Pool.
        ///       avgDiskGiB: number, # Required. The average used disk space in GiB across all Compute Nodes in the Pool.
        ///       peakDiskGiB: number, # Required. The peak used disk space in GiB across all Compute Nodes in the Pool.
        ///       diskReadIOps: number, # Required. The total number of disk read operations across all Compute Nodes in the Pool.
        ///       diskWriteIOps: number, # Required. The total number of disk write operations across all Compute Nodes in the Pool.
        ///       diskReadGiB: number, # Required. The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        ///       diskWriteGiB: number, # Required. The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        ///       networkReadGiB: number, # Required. The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        ///       networkWriteGiB: number, # Required. The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        ///     }, # Optional. Statistics related to resource consumption by Compute Nodes in a Pool.
        ///   }, # Optional. This property is populated only if the CloudPool was retrieved with an expand clause including the &apos;stats&apos; attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        ///   mountConfiguration: [
        ///     {
        ///       azureBlobFileSystemConfiguration: {
        ///         accountName: string, # Required. The Azure Storage Account name.
        ///         containerName: string, # Required. The Azure Blob Storage Container name.
        ///         accountKey: string, # Optional. This property is mutually exclusive with both sasKey and identity; exactly one must be specified.
        ///         sasKey: string, # Optional. This property is mutually exclusive with both accountKey and identity; exactly one must be specified.
        ///         blobfuseOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. This property is mutually exclusive with both accountKey and sasKey; exactly one must be specified.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       nfsMountConfiguration: {
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       cifsMountConfiguration: {
        ///         username: string, # Required. The user to use for authentication against the CIFS file system.
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         password: string, # Required. The password to use for authentication against the CIFS file system.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       azureFileShareConfiguration: {
        ///         accountName: string, # Required. The Azure Storage account name.
        ///         azureFileUrl: string, # Required. This is of the form &apos;https://{account}.file.core.windows.net/&apos;.
        ///         accountKey: string, # Required. The Azure Storage account key.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///     }
        ///   ], # Optional. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        ///   identity: {
        ///     type: &quot;UserAssigned&quot; | &quot;None&quot;, # Required. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///     userAssignedIdentities: [
        ///       {
        ///         resourceId: string, # Required. The ARM resource id of the user assigned identity
        ///         clientId: string, # Optional. The client id of the user assigned identity.
        ///         principalId: string, # Optional. The principal id of the user assigned identity.
        ///       }
        ///     ], # Optional. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///   }, # Optional. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> AddAsync(RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.Add");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddRequest(content, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds a Pool to the specified Account. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Add with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.Add(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call Add with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     id = "<id>",
        ///     displayName = "<displayName>",
        ///     vmSize = "<vmSize>",
        ///     cloudServiceConfiguration = new {
        ///         osFamily = "<osFamily>",
        ///         osVersion = "<osVersion>",
        ///     },
        ///     virtualMachineConfiguration = new {
        ///         imageReference = new {
        ///             publisher = "<publisher>",
        ///             offer = "<offer>",
        ///             sku = "<sku>",
        ///             version = "<version>",
        ///             virtualMachineImageId = "<virtualMachineImageId>",
        ///         },
        ///         nodeAgentSKUId = "<nodeAgentSKUId>",
        ///         windowsConfiguration = new {
        ///             enableAutomaticUpdates = true,
        ///         },
        ///         dataDisks = new[] {
        ///             new {
        ///                 lun = 1234,
        ///                 caching = "none",
        ///                 diskSizeGB = 1234,
        ///                 storageAccountType = "standard_lrs",
        ///             }
        ///         },
        ///         licenseType = "<licenseType>",
        ///         containerConfiguration = new {
        ///             type = "<type>",
        ///             containerImageNames = new[] {
        ///                 "<String>"
        ///             },
        ///             containerRegistries = new[] {
        ///                 new {
        ///                     username = "<username>",
        ///                     password = "<password>",
        ///                     registryServer = "<registryServer>",
        ///                     identityReference = new {
        ///                         resourceId = "<resourceId>",
        ///                     },
        ///                 }
        ///             },
        ///         },
        ///         diskEncryptionConfiguration = new {
        ///             targets = new[] {
        ///                 "osdisk"
        ///             },
        ///         },
        ///         nodePlacementConfiguration = new {
        ///             policy = "regional",
        ///         },
        ///         extensions = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 publisher = "<publisher>",
        ///                 type = "<type>",
        ///                 typeHandlerVersion = "<typeHandlerVersion>",
        ///                 autoUpgradeMinorVersion = true,
        ///                 settings = new {},
        ///                 protectedSettings = new {},
        ///                 provisionAfterExtensions = new[] {
        ///                     "<String>"
        ///                 },
        ///             }
        ///         },
        ///         osDisk = new {
        ///             ephemeralOSDiskSettings = new {
        ///                 placement = "<placement>",
        ///             },
        ///         },
        ///     },
        ///     resizeTimeout = PT1H23M45S,
        ///     targetDedicatedNodes = 1234,
        ///     targetLowPriorityNodes = 1234,
        ///     enableAutoScale = true,
        ///     autoScaleFormula = "<autoScaleFormula>",
        ///     autoScaleEvaluationInterval = PT1H23M45S,
        ///     enableInterNodeCommunication = true,
        ///     networkConfiguration = new {
        ///         subnetId = "<subnetId>",
        ///         dynamicVNetAssignmentScope = "none",
        ///         endpointConfiguration = new {
        ///             inboundNATPools = new[] {
        ///                 new {
        ///                     name = "<name>",
        ///                     protocol = "tcp",
        ///                     backendPort = 1234,
        ///                     frontendPortRangeStart = 1234,
        ///                     frontendPortRangeEnd = 1234,
        ///                     networkSecurityGroupRules = new[] {
        ///                         new {
        ///                             priority = 1234,
        ///                             access = "allow",
        ///                             sourceAddressPrefix = "<sourceAddressPrefix>",
        ///                             sourcePortRanges = new[] {
        ///                                 "<String>"
        ///                             },
        ///                         }
        ///                     },
        ///                 }
        ///             },
        ///         },
        ///         publicIPAddressConfiguration = new {
        ///             provision = "batchmanaged",
        ///             ipAddressIds = new[] {
        ///                 "<String>"
        ///             },
        ///         },
        ///     },
        ///     startTask = new {
        ///         commandLine = "<commandLine>",
        ///         containerSettings = new {
        ///             containerRunOptions = "<containerRunOptions>",
        ///             imageName = "<imageName>",
        ///             registry = new {
        ///                 username = "<username>",
        ///                 password = "<password>",
        ///                 registryServer = "<registryServer>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             },
        ///             workingDirectory = "taskWorkingDirectory",
        ///         },
        ///         resourceFiles = new[] {
        ///             new {
        ///                 autoStorageContainerName = "<autoStorageContainerName>",
        ///                 storageContainerUrl = "<storageContainerUrl>",
        ///                 httpUrl = "<httpUrl>",
        ///                 blobPrefix = "<blobPrefix>",
        ///                 filePath = "<filePath>",
        ///                 fileMode = "<fileMode>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             }
        ///         },
        ///         environmentSettings = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 value = "<value>",
        ///             }
        ///         },
        ///         userIdentity = new {
        ///             username = "<username>",
        ///             autoUser = new {
        ///                 scope = "task",
        ///                 elevationLevel = "nonadmin",
        ///             },
        ///         },
        ///         maxTaskRetryCount = 1234,
        ///         waitForSuccess = true,
        ///     },
        ///     certificateReferences = new[] {
        ///         new {
        ///             thumbprint = "<thumbprint>",
        ///             thumbprintAlgorithm = "<thumbprintAlgorithm>",
        ///             storeLocation = "currentuser",
        ///             storeName = "<storeName>",
        ///             visibility = new[] {
        ///                 "starttask"
        ///             },
        ///         }
        ///     },
        ///     applicationPackageReferences = new[] {
        ///         new {
        ///             applicationId = "<applicationId>",
        ///             version = "<version>",
        ///         }
        ///     },
        ///     applicationLicenses = new[] {
        ///         "<String>"
        ///     },
        ///     taskSlotsPerNode = 1234,
        ///     taskSchedulingPolicy = new {
        ///         nodeFillType = "spread",
        ///     },
        ///     userAccounts = new[] {
        ///         new {
        ///             name = "<name>",
        ///             password = "<password>",
        ///             elevationLevel = "nonadmin",
        ///             linuxUserConfiguration = new {
        ///                 uid = 1234,
        ///                 gid = 1234,
        ///                 sshPrivateKey = "<sshPrivateKey>",
        ///             },
        ///             windowsUserConfiguration = new {
        ///                 loginMode = "batch",
        ///             },
        ///         }
        ///     },
        ///     metadata = new[] {
        ///         new {
        ///             name = "<name>",
        ///             value = "<value>",
        ///         }
        ///     },
        ///     mountConfiguration = new[] {
        ///         new {
        ///             azureBlobFileSystemConfiguration = new {
        ///                 accountName = "<accountName>",
        ///                 containerName = "<containerName>",
        ///                 accountKey = "<accountKey>",
        ///                 sasKey = "<sasKey>",
        ///                 blobfuseOptions = "<blobfuseOptions>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             },
        ///             nfsMountConfiguration = new {
        ///                 source = "<source>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///             },
        ///             cifsMountConfiguration = new {
        ///                 username = "<username>",
        ///                 source = "<source>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///                 password = "<password>",
        ///             },
        ///             azureFileShareConfiguration = new {
        ///                 accountName = "<accountName>",
        ///                 azureFileUrl = "<azureFileUrl>",
        ///                 accountKey = "<accountKey>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///             },
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.Add(RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// When naming Pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Pool</c>:
        /// <code>{
        ///   id: string, # Optional. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
        ///   displayName: string, # Optional. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        ///   url: string, # Optional. The URL of the Pool.
        ///   eTag: string, # Optional. This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime.
        ///   lastModified: string (ISO 8601 Format), # Optional. This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
        ///   creationTime: string (ISO 8601 Format), # Optional. The creation time of the Pool.
        ///   state: &quot;active&quot; | &quot;deleting&quot;, # Optional. The current state of the Pool.
        ///   stateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current state.
        ///   allocationState: &quot;steady&quot; | &quot;resizing&quot; | &quot;stopping&quot;, # Optional. Whether the Pool is resizing.
        ///   allocationStateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current allocation state.
        ///   vmSize: string, # Optional. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        ///   cloudServiceConfiguration: {
        ///     osFamily: string, # Required. Possible values are:
        /// 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1.
        /// 3 - OS Family 3, equivalent to Windows Server 2012.
        /// 4 - OS Family 4, equivalent to Windows Server 2012 R2.
        /// 5 - OS Family 5, equivalent to Windows Server 2016.
        /// 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        ///     osVersion: string, # Optional. The default value is * which specifies the latest operating system version for the specified OS family.
        ///   }, # Optional. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to &apos;UserSubscription&apos;.
        ///   virtualMachineConfiguration: {
        ///     imageReference: {
        ///       publisher: string, # Optional. For example, Canonical or MicrosoftWindowsServer.
        ///       offer: string, # Optional. For example, UbuntuServer or WindowsServer.
        ///       sku: string, # Optional. For example, 18.04-LTS or 2019-Datacenter.
        ///       version: string, # Optional. A value of &apos;latest&apos; can be specified to select the latest version of an Image. If omitted, the default is &apos;latest&apos;.
        ///       virtualMachineImageId: string, # Optional. This property is mutually exclusive with other ImageReference properties. The Shared Image Gallery Image must have replicas in the same region and must be in the same subscription as the Azure Batch account. If the image version is not specified in the imageId, the latest version will be used. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        ///       exactVersion: string, # Optional. The specific version of the platform image or marketplace image used to create the node. This read-only field differs from &apos;version&apos; only if the value specified for &apos;version&apos; when the pool was created was &apos;latest&apos;.
        ///     }, # Required. A reference to an Azure Virtual Machines Marketplace Image or a Shared Image Gallery Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the &apos;List Supported Images&apos; operation.
        ///     nodeAgentSKUId: string, # Required. The Batch Compute Node agent is a program that runs on each Compute Node in the Pool, and provides the command-and-control interface between the Compute Node and the Batch service. There are different implementations of the Compute Node agent, known as SKUs, for different operating systems. You must specify a Compute Node agent SKU which matches the selected Image reference. To get the list of supported Compute Node agent SKUs along with their list of verified Image references, see the &apos;List supported Compute Node agent SKUs&apos; operation.
        ///     windowsConfiguration: {
        ///       enableAutomaticUpdates: boolean, # Optional. If omitted, the default value is true.
        ///     }, # Optional. This property must not be specified if the imageReference property specifies a Linux OS Image.
        ///     dataDisks: [
        ///       {
        ///         lun: number, # Required. The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
        ///         caching: &quot;none&quot; | &quot;readonly&quot; | &quot;readwrite&quot;, # Optional. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        ///         diskSizeGB: number, # Required. The initial disk size in gigabytes.
        ///         storageAccountType: &quot;standard_lrs&quot; | &quot;premium_lrs&quot;, # Optional. If omitted, the default is &quot;standard_lrs&quot;.
        ///       }
        ///     ], # Optional. This property must be specified if the Compute Nodes in the Pool need to have empty data disks attached to them. This cannot be updated. Each Compute Node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the Compute Node is removed from the Pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
        ///     licenseType: string, # Optional. This only applies to Images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the Compute Nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        ///     containerConfiguration: {
        ///       type: string, # Required. The container technology to be used.
        ///       containerImageNames: [string], # Optional. This is the full Image reference, as would be specified to &quot;docker pull&quot;. An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
        ///       containerRegistries: [
        ///         {
        ///           username: string, # Optional. The user name to log into the registry server.
        ///           password: string, # Optional. The password to log into the registry server.
        ///           registryServer: string, # Optional. If omitted, the default is &quot;docker.io&quot;.
        ///           identityReference: {
        ///             resourceId: string, # Optional. The ARM resource id of the user assigned identity.
        ///           }, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///         }
        ///       ], # Optional. If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
        ///     }, # Optional. If specified, setup is performed on each Compute Node in the Pool to allow Tasks to run in containers. All regular Tasks and Job manager Tasks run on this Pool must specify the containerSettings property, and all other Tasks may specify it.
        ///     diskEncryptionConfiguration: {
        ///       targets: [&quot;osdisk&quot; | &quot;temporarydisk&quot;], # Optional. If omitted, no disks on the compute nodes in the pool will be encrypted. On Linux pool, only &quot;TemporaryDisk&quot; is supported; on Windows pool, &quot;OsDisk&quot; and &quot;TemporaryDisk&quot; must be specified.
        ///     }, # Optional. If specified, encryption is performed on each node in the pool during node provisioning.
        ///     nodePlacementConfiguration: {
        ///       policy: &quot;regional&quot; | &quot;zonal&quot;, # Optional. Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.
        ///     }, # Optional. This configuration will specify rules on how nodes in the pool will be physically allocated.
        ///     extensions: [
        ///       {
        ///         name: string, # Required. The name of the virtual machine extension.
        ///         publisher: string, # Required. The name of the extension handler publisher.
        ///         type: string, # Required. The type of the extension.
        ///         typeHandlerVersion: string, # Optional. The version of script handler.
        ///         autoUpgradeMinorVersion: boolean, # Optional. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        ///         settings: AnyObject, # Optional. JSON formatted public settings for the extension.
        ///         protectedSettings: AnyObject, # Optional. The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. 
        ///         provisionAfterExtensions: [string], # Optional. Collection of extension names after which this extension needs to be provisioned.
        ///       }
        ///     ], # Optional. If specified, the extensions mentioned in this configuration will be installed on each node.
        ///     osDisk: {
        ///       ephemeralOSDiskSettings: {
        ///         placement: string, # Optional. This property can be used by user in the request to choose the location e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.
        ///       }, # Optional. Specifies the ephemeral Disk Settings for the operating system disk used by the compute node (VM).
        ///     }, # Optional. Settings for the operating system disk of the compute node (VM).
        ///   }, # Optional. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
        ///   resizeErrors: [
        ///     {
        ///       code: string, # Optional. An identifier for the Pool resize error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the Pool resize error, intended to be suitable for display in a user interface.
        ///       values: [
        ///         {
        ///           name: string, # Optional. The name in the name-value pair.
        ///           value: string, # Optional. The value in the name-value pair.
        ///         }
        ///       ], # Optional. A list of additional error details related to the Pool resize error.
        ///     }
        ///   ], # Optional. This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady.
        ///   currentDedicatedNodes: number, # Optional. The number of dedicated Compute Nodes currently in the Pool.
        ///   currentLowPriorityNodes: number, # Optional. Spot/Low-priority Compute Nodes which have been preempted are included in this count.
        ///   targetDedicatedNodes: number, # Optional. The desired number of dedicated Compute Nodes in the Pool.
        ///   targetLowPriorityNodes: number, # Optional. The desired number of Spot/Low-priority Compute Nodes in the Pool.
        ///   enableAutoScale: boolean, # Optional. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.
        ///   autoScaleFormula: string, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleEvaluationInterval: string (duration ISO 8601 Format), # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleRun: {
        ///     timestamp: string (ISO 8601 Format), # Required. The time at which the autoscale formula was last evaluated.
        ///     results: string, # Optional. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        ///     error: {
        ///       code: string, # Optional. An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the autoscale error, intended to be suitable for display in a user interface.
        ///       values: [NameValuePair], # Optional. A list of additional error details related to the autoscale error.
        ///     }, # Optional. An error that occurred when executing or evaluating a Pool autoscale formula.
        ///   }, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   enableInterNodeCommunication: boolean, # Optional. This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool.
        ///   networkConfiguration: {
        ///     subnetId: string, # Optional. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn&apos;t have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The &apos;MicrosoftAzureBatch&apos; service principal must have the &apos;Classic Virtual Machine Contributor&apos; Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks (&apos;Microsoft.Network/virtualNetworks&apos;) are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        ///     dynamicVNetAssignmentScope: &quot;none&quot; | &quot;job&quot;, # Optional. The scope of dynamic vnet assignment.
        ///     endpointConfiguration: {
        ///       inboundNATPools: [
        ///         {
        ///           name: string, # Required. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
        ///           protocol: &quot;tcp&quot; | &quot;udp&quot;, # Required. The protocol of the endpoint.
        ///           backendPort: number, # Required. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeStart: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeEnd: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           networkSecurityGroupRules: [
        ///             {
        ///               priority: number, # Required. Priorities within a Pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
        ///               access: &quot;allow&quot; | &quot;deny&quot;, # Required. The action that should be taken for a specified IP address, subnet range or tag.
        ///               sourceAddressPrefix: string, # Required. Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
        ///               sourcePortRanges: [string], # Optional. Valid values are &apos;*&apos; (for all ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0 to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port). If any other values are provided the request fails with HTTP status code 400. The default value is &apos;*&apos;.
        ///             }
        ///           ], # Optional. The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
        ///         }
        ///       ], # Required. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        ///     }, # Optional. Pool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
        ///     publicIPAddressConfiguration: {
        ///       provision: &quot;batchmanaged&quot; | &quot;usermanaged&quot; | &quot;nopublicipaddresses&quot;, # Optional. The default value is BatchManaged.
        ///       ipAddressIds: [string], # Optional. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        ///     }, # Optional. Public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
        ///   }, # Optional. The network configuration for a Pool.
        ///   startTask: {
        ///     commandLine: string, # Required. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using &quot;cmd /c MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        ///     containerSettings: {
        ///       containerRunOptions: string, # Optional. These additional options are supplied as arguments to the &quot;docker create&quot; command, in addition to those controlled by the Batch Service.
        ///       imageName: string, # Required. This is the full Image reference, as would be specified to &quot;docker pull&quot;. If no tag is provided as part of the Image name, the tag &quot;:latest&quot; is used as a default.
        ///       registry: ContainerRegistry, # Optional. This setting can be omitted if was already provided at Pool creation.
        ///       workingDirectory: &quot;taskWorkingDirectory&quot; | &quot;containerImageDefault&quot;, # Optional. The default is &apos;taskWorkingDirectory&apos;.
        ///     }, # Optional. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
        ///         storageContainerUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access.
        ///         httpUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access.
        ///         blobPrefix: string, # Optional. The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        ///         filePath: string, # Optional. If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task&apos;s working directory (for example by using &apos;..&apos;).
        ///         fileMode: string, # Optional. This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }
        ///     ], # Optional. Files listed under this element are located in the Task&apos;s working directory.
        ///     environmentSettings: [
        ///       {
        ///         name: string, # Required. The name of the environment variable.
        ///         value: string, # Optional. The value of the environment variable.
        ///       }
        ///     ], # Optional. A list of environment variable settings for the StartTask.
        ///     userIdentity: {
        ///       username: string, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///       autoUser: {
        ///         scope: &quot;task&quot; | &quot;pool&quot;, # Optional. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.
        ///         elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       }, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///     }, # Optional. If omitted, the Task runs as a non-administrative user unique to the Task.
        ///     maxTaskRetryCount: number, # Optional. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)
        ///     waitForSuccess: boolean, # Optional. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        ///   }, # Optional. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
        ///   certificateReferences: [
        ///     {
        ///       thumbprint: string, # Required. The thumbprint of the Certificate.
        ///       thumbprintAlgorithm: string, # Required. The algorithm with which the thumbprint is associated. This must be sha1.
        ///       storeLocation: &quot;currentuser&quot; | &quot;localmachine&quot;, # Optional. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///       storeName: string, # Optional. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
        ///       visibility: [&quot;starttask&quot; | &quot;task&quot; | &quot;remoteuser&quot;], # Optional. You can specify more than one visibility in this collection. The default is all Accounts.
        ///     }
        ///   ], # Optional. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///   applicationPackageReferences: [
        ///     {
        ///       applicationId: string, # Required. The ID of the application to deploy.
        ///       version: string, # Optional. If this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error.
        ///     }
        ///   ], # Optional. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
        ///   applicationLicenses: [string], # Optional. The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.
        ///   taskSlotsPerNode: number, # Optional. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        ///   taskSchedulingPolicy: {
        ///     nodeFillType: &quot;spread&quot; | &quot;pack&quot;, # Required. If not specified, the default is spread.
        ///   }, # Optional. If not specified, the default is spread.
        ///   userAccounts: [
        ///     {
        ///       name: string, # Required. The name of the user Account.
        ///       password: string, # Required. The password for the user Account.
        ///       elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       linuxUserConfiguration: {
        ///         uid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
        ///         gid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
        ///         sshPrivateKey: string, # Optional. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool&apos;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&apos;s .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user&apos;s .ssh directory is done).
        ///       }, # Optional. This property is ignored if specified on a Windows Pool. If not specified, the user is created with the default options.
        ///       windowsUserConfiguration: {
        ///         loginMode: &quot;batch&quot; | &quot;interactive&quot;, # Optional. The default value for VirtualMachineConfiguration Pools is &apos;batch&apos; and for CloudServiceConfiguration Pools is &apos;interactive&apos;.
        ///       }, # Optional. This property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
        ///     }
        ///   ], # Optional. The list of user Accounts to be created on each Compute Node in the Pool.
        ///   metadata: [
        ///     {
        ///       name: string, # Required. The name of the metadata item.
        ///       value: string, # Required. The value of the metadata item.
        ///     }
        ///   ], # Optional. A list of name-value pairs associated with the Pool as metadata.
        ///   stats: {
        ///     url: string, # Required. The URL for the statistics.
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     usageStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       dedicatedCoreTime: string (duration ISO 8601 Format), # Required. The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        ///     }, # Optional. Statistics related to Pool usage information.
        ///     resourceStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       avgCPUPercentage: number, # Required. The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        ///       avgMemoryGiB: number, # Required. The average memory usage in GiB across all Compute Nodes in the Pool.
        ///       peakMemoryGiB: number, # Required. The peak memory usage in GiB across all Compute Nodes in the Pool.
        ///       avgDiskGiB: number, # Required. The average used disk space in GiB across all Compute Nodes in the Pool.
        ///       peakDiskGiB: number, # Required. The peak used disk space in GiB across all Compute Nodes in the Pool.
        ///       diskReadIOps: number, # Required. The total number of disk read operations across all Compute Nodes in the Pool.
        ///       diskWriteIOps: number, # Required. The total number of disk write operations across all Compute Nodes in the Pool.
        ///       diskReadGiB: number, # Required. The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        ///       diskWriteGiB: number, # Required. The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        ///       networkReadGiB: number, # Required. The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        ///       networkWriteGiB: number, # Required. The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        ///     }, # Optional. Statistics related to resource consumption by Compute Nodes in a Pool.
        ///   }, # Optional. This property is populated only if the CloudPool was retrieved with an expand clause including the &apos;stats&apos; attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        ///   mountConfiguration: [
        ///     {
        ///       azureBlobFileSystemConfiguration: {
        ///         accountName: string, # Required. The Azure Storage Account name.
        ///         containerName: string, # Required. The Azure Blob Storage Container name.
        ///         accountKey: string, # Optional. This property is mutually exclusive with both sasKey and identity; exactly one must be specified.
        ///         sasKey: string, # Optional. This property is mutually exclusive with both accountKey and identity; exactly one must be specified.
        ///         blobfuseOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. This property is mutually exclusive with both accountKey and sasKey; exactly one must be specified.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       nfsMountConfiguration: {
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       cifsMountConfiguration: {
        ///         username: string, # Required. The user to use for authentication against the CIFS file system.
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         password: string, # Required. The password to use for authentication against the CIFS file system.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       azureFileShareConfiguration: {
        ///         accountName: string, # Required. The Azure Storage account name.
        ///         azureFileUrl: string, # Required. This is of the form &apos;https://{account}.file.core.windows.net/&apos;.
        ///         accountKey: string, # Required. The Azure Storage account key.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///     }
        ///   ], # Optional. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        ///   identity: {
        ///     type: &quot;UserAssigned&quot; | &quot;None&quot;, # Required. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///     userAssignedIdentities: [
        ///       {
        ///         resourceId: string, # Required. The ARM resource id of the user assigned identity
        ///         clientId: string, # Optional. The client id of the user assigned identity.
        ///         principalId: string, # Optional. The principal id of the user assigned identity.
        ///       }
        ///     ], # Optional. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///   }, # Optional. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Add(RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.Add");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAddRequest(content, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a Pool from the specified Account. </summary>
        /// <param name="poolId"> The ID of the Pool to delete. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.DeleteAsync("<poolId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call DeleteAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.DeleteAsync("<poolId>", 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> When you request that a Pool be deleted, the following actions occur: the Pool state is set to deleting; any ongoing resize operation on the Pool are stopped; the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks running on existing Compute Nodes are terminated and requeued (as if a resize Pool operation had been requested with the default requeue option); finally, the Pool is removed from the system. Because running Tasks are requeued, the user can rerun these Tasks by updating their Job to target a different Pool. The Tasks can then run on the new Pool. If you want to override the requeue behavior, then you should call resize Pool explicitly to shrink the Pool to zero size before deleting the Pool. If you call an Update, Patch or Delete API on a Pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted. </remarks>
        public virtual async Task<Response> DeleteAsync(string poolId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(poolId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a Pool from the specified Account. </summary>
        /// <param name="poolId"> The ID of the Pool to delete. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.Delete("<poolId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call Delete with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.Delete("<poolId>", 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> When you request that a Pool be deleted, the following actions occur: the Pool state is set to deleting; any ongoing resize operation on the Pool are stopped; the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks running on existing Compute Nodes are terminated and requeued (as if a resize Pool operation had been requested with the default requeue option); finally, the Pool is removed from the system. Because running Tasks are requeued, the user can rerun these Tasks by updating their Job to target a different Pool. The Tasks can then run on the new Pool. If you want to override the requeue behavior, then you should call resize Pool explicitly to shrink the Pool to zero size before deleting the Pool. If you call an Update, Patch or Delete API on a Pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted. </remarks>
        public virtual Response Delete(string poolId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(poolId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets basic properties of a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ExistsAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.ExistsAsync("<poolId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call ExistsAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.ExistsAsync("<poolId>", 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ExistsAsync(string poolId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.Exists");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExistsRequest(poolId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets basic properties of a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Exists with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.Exists("<poolId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call Exists with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.Exists("<poolId>", 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Exists(string poolId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.Exists");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExistsRequest(poolId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPoolAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.GetPoolAsync("<poolId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetPoolAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.GetPoolAsync("<poolId>", "<select>", "<expand>", 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("lastModified").ToString());
        /// Console.WriteLine(result.GetProperty("creationTime").ToString());
        /// Console.WriteLine(result.GetProperty("state").ToString());
        /// Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
        /// Console.WriteLine(result.GetProperty("allocationState").ToString());
        /// Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
        /// Console.WriteLine(result.GetProperty("vmSize").ToString());
        /// Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osFamily").ToString());
        /// Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osVersion").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
        /// Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
        /// Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
        /// Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
        /// Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
        /// Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
        /// Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
        /// Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprint").ToString());
        /// Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprintAlgorithm").ToString());
        /// Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeLocation").ToString());
        /// Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeName").ToString());
        /// Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("visibility")[0].ToString());
        /// Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
        /// Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("applicationLicenses")[0].ToString());
        /// Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
        /// Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
        /// Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Pool</c>:
        /// <code>{
        ///   id: string, # Optional. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
        ///   displayName: string, # Optional. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        ///   url: string, # Optional. The URL of the Pool.
        ///   eTag: string, # Optional. This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime.
        ///   lastModified: string (ISO 8601 Format), # Optional. This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
        ///   creationTime: string (ISO 8601 Format), # Optional. The creation time of the Pool.
        ///   state: &quot;active&quot; | &quot;deleting&quot;, # Optional. The current state of the Pool.
        ///   stateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current state.
        ///   allocationState: &quot;steady&quot; | &quot;resizing&quot; | &quot;stopping&quot;, # Optional. Whether the Pool is resizing.
        ///   allocationStateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current allocation state.
        ///   vmSize: string, # Optional. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        ///   cloudServiceConfiguration: {
        ///     osFamily: string, # Required. Possible values are:
        /// 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1.
        /// 3 - OS Family 3, equivalent to Windows Server 2012.
        /// 4 - OS Family 4, equivalent to Windows Server 2012 R2.
        /// 5 - OS Family 5, equivalent to Windows Server 2016.
        /// 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        ///     osVersion: string, # Optional. The default value is * which specifies the latest operating system version for the specified OS family.
        ///   }, # Optional. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to &apos;UserSubscription&apos;.
        ///   virtualMachineConfiguration: {
        ///     imageReference: {
        ///       publisher: string, # Optional. For example, Canonical or MicrosoftWindowsServer.
        ///       offer: string, # Optional. For example, UbuntuServer or WindowsServer.
        ///       sku: string, # Optional. For example, 18.04-LTS or 2019-Datacenter.
        ///       version: string, # Optional. A value of &apos;latest&apos; can be specified to select the latest version of an Image. If omitted, the default is &apos;latest&apos;.
        ///       virtualMachineImageId: string, # Optional. This property is mutually exclusive with other ImageReference properties. The Shared Image Gallery Image must have replicas in the same region and must be in the same subscription as the Azure Batch account. If the image version is not specified in the imageId, the latest version will be used. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        ///       exactVersion: string, # Optional. The specific version of the platform image or marketplace image used to create the node. This read-only field differs from &apos;version&apos; only if the value specified for &apos;version&apos; when the pool was created was &apos;latest&apos;.
        ///     }, # Required. A reference to an Azure Virtual Machines Marketplace Image or a Shared Image Gallery Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the &apos;List Supported Images&apos; operation.
        ///     nodeAgentSKUId: string, # Required. The Batch Compute Node agent is a program that runs on each Compute Node in the Pool, and provides the command-and-control interface between the Compute Node and the Batch service. There are different implementations of the Compute Node agent, known as SKUs, for different operating systems. You must specify a Compute Node agent SKU which matches the selected Image reference. To get the list of supported Compute Node agent SKUs along with their list of verified Image references, see the &apos;List supported Compute Node agent SKUs&apos; operation.
        ///     windowsConfiguration: {
        ///       enableAutomaticUpdates: boolean, # Optional. If omitted, the default value is true.
        ///     }, # Optional. This property must not be specified if the imageReference property specifies a Linux OS Image.
        ///     dataDisks: [
        ///       {
        ///         lun: number, # Required. The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
        ///         caching: &quot;none&quot; | &quot;readonly&quot; | &quot;readwrite&quot;, # Optional. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        ///         diskSizeGB: number, # Required. The initial disk size in gigabytes.
        ///         storageAccountType: &quot;standard_lrs&quot; | &quot;premium_lrs&quot;, # Optional. If omitted, the default is &quot;standard_lrs&quot;.
        ///       }
        ///     ], # Optional. This property must be specified if the Compute Nodes in the Pool need to have empty data disks attached to them. This cannot be updated. Each Compute Node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the Compute Node is removed from the Pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
        ///     licenseType: string, # Optional. This only applies to Images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the Compute Nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        ///     containerConfiguration: {
        ///       type: string, # Required. The container technology to be used.
        ///       containerImageNames: [string], # Optional. This is the full Image reference, as would be specified to &quot;docker pull&quot;. An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
        ///       containerRegistries: [
        ///         {
        ///           username: string, # Optional. The user name to log into the registry server.
        ///           password: string, # Optional. The password to log into the registry server.
        ///           registryServer: string, # Optional. If omitted, the default is &quot;docker.io&quot;.
        ///           identityReference: {
        ///             resourceId: string, # Optional. The ARM resource id of the user assigned identity.
        ///           }, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///         }
        ///       ], # Optional. If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
        ///     }, # Optional. If specified, setup is performed on each Compute Node in the Pool to allow Tasks to run in containers. All regular Tasks and Job manager Tasks run on this Pool must specify the containerSettings property, and all other Tasks may specify it.
        ///     diskEncryptionConfiguration: {
        ///       targets: [&quot;osdisk&quot; | &quot;temporarydisk&quot;], # Optional. If omitted, no disks on the compute nodes in the pool will be encrypted. On Linux pool, only &quot;TemporaryDisk&quot; is supported; on Windows pool, &quot;OsDisk&quot; and &quot;TemporaryDisk&quot; must be specified.
        ///     }, # Optional. If specified, encryption is performed on each node in the pool during node provisioning.
        ///     nodePlacementConfiguration: {
        ///       policy: &quot;regional&quot; | &quot;zonal&quot;, # Optional. Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.
        ///     }, # Optional. This configuration will specify rules on how nodes in the pool will be physically allocated.
        ///     extensions: [
        ///       {
        ///         name: string, # Required. The name of the virtual machine extension.
        ///         publisher: string, # Required. The name of the extension handler publisher.
        ///         type: string, # Required. The type of the extension.
        ///         typeHandlerVersion: string, # Optional. The version of script handler.
        ///         autoUpgradeMinorVersion: boolean, # Optional. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        ///         settings: AnyObject, # Optional. JSON formatted public settings for the extension.
        ///         protectedSettings: AnyObject, # Optional. The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. 
        ///         provisionAfterExtensions: [string], # Optional. Collection of extension names after which this extension needs to be provisioned.
        ///       }
        ///     ], # Optional. If specified, the extensions mentioned in this configuration will be installed on each node.
        ///     osDisk: {
        ///       ephemeralOSDiskSettings: {
        ///         placement: string, # Optional. This property can be used by user in the request to choose the location e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.
        ///       }, # Optional. Specifies the ephemeral Disk Settings for the operating system disk used by the compute node (VM).
        ///     }, # Optional. Settings for the operating system disk of the compute node (VM).
        ///   }, # Optional. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
        ///   resizeErrors: [
        ///     {
        ///       code: string, # Optional. An identifier for the Pool resize error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the Pool resize error, intended to be suitable for display in a user interface.
        ///       values: [
        ///         {
        ///           name: string, # Optional. The name in the name-value pair.
        ///           value: string, # Optional. The value in the name-value pair.
        ///         }
        ///       ], # Optional. A list of additional error details related to the Pool resize error.
        ///     }
        ///   ], # Optional. This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady.
        ///   currentDedicatedNodes: number, # Optional. The number of dedicated Compute Nodes currently in the Pool.
        ///   currentLowPriorityNodes: number, # Optional. Spot/Low-priority Compute Nodes which have been preempted are included in this count.
        ///   targetDedicatedNodes: number, # Optional. The desired number of dedicated Compute Nodes in the Pool.
        ///   targetLowPriorityNodes: number, # Optional. The desired number of Spot/Low-priority Compute Nodes in the Pool.
        ///   enableAutoScale: boolean, # Optional. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.
        ///   autoScaleFormula: string, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleEvaluationInterval: string (duration ISO 8601 Format), # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleRun: {
        ///     timestamp: string (ISO 8601 Format), # Required. The time at which the autoscale formula was last evaluated.
        ///     results: string, # Optional. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        ///     error: {
        ///       code: string, # Optional. An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the autoscale error, intended to be suitable for display in a user interface.
        ///       values: [NameValuePair], # Optional. A list of additional error details related to the autoscale error.
        ///     }, # Optional. An error that occurred when executing or evaluating a Pool autoscale formula.
        ///   }, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   enableInterNodeCommunication: boolean, # Optional. This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool.
        ///   networkConfiguration: {
        ///     subnetId: string, # Optional. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn&apos;t have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The &apos;MicrosoftAzureBatch&apos; service principal must have the &apos;Classic Virtual Machine Contributor&apos; Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks (&apos;Microsoft.Network/virtualNetworks&apos;) are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        ///     dynamicVNetAssignmentScope: &quot;none&quot; | &quot;job&quot;, # Optional. The scope of dynamic vnet assignment.
        ///     endpointConfiguration: {
        ///       inboundNATPools: [
        ///         {
        ///           name: string, # Required. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
        ///           protocol: &quot;tcp&quot; | &quot;udp&quot;, # Required. The protocol of the endpoint.
        ///           backendPort: number, # Required. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeStart: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeEnd: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           networkSecurityGroupRules: [
        ///             {
        ///               priority: number, # Required. Priorities within a Pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
        ///               access: &quot;allow&quot; | &quot;deny&quot;, # Required. The action that should be taken for a specified IP address, subnet range or tag.
        ///               sourceAddressPrefix: string, # Required. Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
        ///               sourcePortRanges: [string], # Optional. Valid values are &apos;*&apos; (for all ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0 to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port). If any other values are provided the request fails with HTTP status code 400. The default value is &apos;*&apos;.
        ///             }
        ///           ], # Optional. The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
        ///         }
        ///       ], # Required. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        ///     }, # Optional. Pool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
        ///     publicIPAddressConfiguration: {
        ///       provision: &quot;batchmanaged&quot; | &quot;usermanaged&quot; | &quot;nopublicipaddresses&quot;, # Optional. The default value is BatchManaged.
        ///       ipAddressIds: [string], # Optional. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        ///     }, # Optional. Public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
        ///   }, # Optional. The network configuration for a Pool.
        ///   startTask: {
        ///     commandLine: string, # Required. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using &quot;cmd /c MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        ///     containerSettings: {
        ///       containerRunOptions: string, # Optional. These additional options are supplied as arguments to the &quot;docker create&quot; command, in addition to those controlled by the Batch Service.
        ///       imageName: string, # Required. This is the full Image reference, as would be specified to &quot;docker pull&quot;. If no tag is provided as part of the Image name, the tag &quot;:latest&quot; is used as a default.
        ///       registry: ContainerRegistry, # Optional. This setting can be omitted if was already provided at Pool creation.
        ///       workingDirectory: &quot;taskWorkingDirectory&quot; | &quot;containerImageDefault&quot;, # Optional. The default is &apos;taskWorkingDirectory&apos;.
        ///     }, # Optional. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
        ///         storageContainerUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access.
        ///         httpUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access.
        ///         blobPrefix: string, # Optional. The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        ///         filePath: string, # Optional. If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task&apos;s working directory (for example by using &apos;..&apos;).
        ///         fileMode: string, # Optional. This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }
        ///     ], # Optional. Files listed under this element are located in the Task&apos;s working directory.
        ///     environmentSettings: [
        ///       {
        ///         name: string, # Required. The name of the environment variable.
        ///         value: string, # Optional. The value of the environment variable.
        ///       }
        ///     ], # Optional. A list of environment variable settings for the StartTask.
        ///     userIdentity: {
        ///       username: string, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///       autoUser: {
        ///         scope: &quot;task&quot; | &quot;pool&quot;, # Optional. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.
        ///         elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       }, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///     }, # Optional. If omitted, the Task runs as a non-administrative user unique to the Task.
        ///     maxTaskRetryCount: number, # Optional. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)
        ///     waitForSuccess: boolean, # Optional. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        ///   }, # Optional. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
        ///   certificateReferences: [
        ///     {
        ///       thumbprint: string, # Required. The thumbprint of the Certificate.
        ///       thumbprintAlgorithm: string, # Required. The algorithm with which the thumbprint is associated. This must be sha1.
        ///       storeLocation: &quot;currentuser&quot; | &quot;localmachine&quot;, # Optional. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///       storeName: string, # Optional. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
        ///       visibility: [&quot;starttask&quot; | &quot;task&quot; | &quot;remoteuser&quot;], # Optional. You can specify more than one visibility in this collection. The default is all Accounts.
        ///     }
        ///   ], # Optional. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///   applicationPackageReferences: [
        ///     {
        ///       applicationId: string, # Required. The ID of the application to deploy.
        ///       version: string, # Optional. If this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error.
        ///     }
        ///   ], # Optional. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
        ///   applicationLicenses: [string], # Optional. The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.
        ///   taskSlotsPerNode: number, # Optional. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        ///   taskSchedulingPolicy: {
        ///     nodeFillType: &quot;spread&quot; | &quot;pack&quot;, # Required. If not specified, the default is spread.
        ///   }, # Optional. If not specified, the default is spread.
        ///   userAccounts: [
        ///     {
        ///       name: string, # Required. The name of the user Account.
        ///       password: string, # Required. The password for the user Account.
        ///       elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       linuxUserConfiguration: {
        ///         uid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
        ///         gid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
        ///         sshPrivateKey: string, # Optional. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool&apos;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&apos;s .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user&apos;s .ssh directory is done).
        ///       }, # Optional. This property is ignored if specified on a Windows Pool. If not specified, the user is created with the default options.
        ///       windowsUserConfiguration: {
        ///         loginMode: &quot;batch&quot; | &quot;interactive&quot;, # Optional. The default value for VirtualMachineConfiguration Pools is &apos;batch&apos; and for CloudServiceConfiguration Pools is &apos;interactive&apos;.
        ///       }, # Optional. This property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
        ///     }
        ///   ], # Optional. The list of user Accounts to be created on each Compute Node in the Pool.
        ///   metadata: [
        ///     {
        ///       name: string, # Required. The name of the metadata item.
        ///       value: string, # Required. The value of the metadata item.
        ///     }
        ///   ], # Optional. A list of name-value pairs associated with the Pool as metadata.
        ///   stats: {
        ///     url: string, # Required. The URL for the statistics.
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     usageStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       dedicatedCoreTime: string (duration ISO 8601 Format), # Required. The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        ///     }, # Optional. Statistics related to Pool usage information.
        ///     resourceStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       avgCPUPercentage: number, # Required. The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        ///       avgMemoryGiB: number, # Required. The average memory usage in GiB across all Compute Nodes in the Pool.
        ///       peakMemoryGiB: number, # Required. The peak memory usage in GiB across all Compute Nodes in the Pool.
        ///       avgDiskGiB: number, # Required. The average used disk space in GiB across all Compute Nodes in the Pool.
        ///       peakDiskGiB: number, # Required. The peak used disk space in GiB across all Compute Nodes in the Pool.
        ///       diskReadIOps: number, # Required. The total number of disk read operations across all Compute Nodes in the Pool.
        ///       diskWriteIOps: number, # Required. The total number of disk write operations across all Compute Nodes in the Pool.
        ///       diskReadGiB: number, # Required. The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        ///       diskWriteGiB: number, # Required. The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        ///       networkReadGiB: number, # Required. The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        ///       networkWriteGiB: number, # Required. The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        ///     }, # Optional. Statistics related to resource consumption by Compute Nodes in a Pool.
        ///   }, # Optional. This property is populated only if the CloudPool was retrieved with an expand clause including the &apos;stats&apos; attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        ///   mountConfiguration: [
        ///     {
        ///       azureBlobFileSystemConfiguration: {
        ///         accountName: string, # Required. The Azure Storage Account name.
        ///         containerName: string, # Required. The Azure Blob Storage Container name.
        ///         accountKey: string, # Optional. This property is mutually exclusive with both sasKey and identity; exactly one must be specified.
        ///         sasKey: string, # Optional. This property is mutually exclusive with both accountKey and identity; exactly one must be specified.
        ///         blobfuseOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. This property is mutually exclusive with both accountKey and sasKey; exactly one must be specified.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       nfsMountConfiguration: {
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       cifsMountConfiguration: {
        ///         username: string, # Required. The user to use for authentication against the CIFS file system.
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         password: string, # Required. The password to use for authentication against the CIFS file system.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       azureFileShareConfiguration: {
        ///         accountName: string, # Required. The Azure Storage account name.
        ///         azureFileUrl: string, # Required. This is of the form &apos;https://{account}.file.core.windows.net/&apos;.
        ///         accountKey: string, # Required. The Azure Storage account key.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///     }
        ///   ], # Optional. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        ///   identity: {
        ///     type: &quot;UserAssigned&quot; | &quot;None&quot;, # Required. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///     userAssignedIdentities: [
        ///       {
        ///         resourceId: string, # Required. The ARM resource id of the user assigned identity
        ///         clientId: string, # Optional. The client id of the user assigned identity.
        ///         principalId: string, # Optional. The principal id of the user assigned identity.
        ///       }
        ///     ], # Optional. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///   }, # Optional. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetPoolAsync(string poolId, string select = null, string expand = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.GetPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPoolRequest(poolId, select, expand, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPool with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.GetPool("<poolId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetPool with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.GetPool("<poolId>", "<select>", "<expand>", 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("displayName").ToString());
        /// Console.WriteLine(result.GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("lastModified").ToString());
        /// Console.WriteLine(result.GetProperty("creationTime").ToString());
        /// Console.WriteLine(result.GetProperty("state").ToString());
        /// Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
        /// Console.WriteLine(result.GetProperty("allocationState").ToString());
        /// Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
        /// Console.WriteLine(result.GetProperty("vmSize").ToString());
        /// Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osFamily").ToString());
        /// Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osVersion").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
        /// Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
        /// Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
        /// Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
        /// Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
        /// Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
        /// Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
        /// Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
        /// Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
        /// Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
        /// Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprint").ToString());
        /// Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprintAlgorithm").ToString());
        /// Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeLocation").ToString());
        /// Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeName").ToString());
        /// Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("visibility")[0].ToString());
        /// Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
        /// Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
        /// Console.WriteLine(result.GetProperty("applicationLicenses")[0].ToString());
        /// Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
        /// Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
        /// Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
        /// Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
        /// Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
        /// Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
        /// Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Pool</c>:
        /// <code>{
        ///   id: string, # Optional. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
        ///   displayName: string, # Optional. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        ///   url: string, # Optional. The URL of the Pool.
        ///   eTag: string, # Optional. This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime.
        ///   lastModified: string (ISO 8601 Format), # Optional. This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
        ///   creationTime: string (ISO 8601 Format), # Optional. The creation time of the Pool.
        ///   state: &quot;active&quot; | &quot;deleting&quot;, # Optional. The current state of the Pool.
        ///   stateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current state.
        ///   allocationState: &quot;steady&quot; | &quot;resizing&quot; | &quot;stopping&quot;, # Optional. Whether the Pool is resizing.
        ///   allocationStateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current allocation state.
        ///   vmSize: string, # Optional. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        ///   cloudServiceConfiguration: {
        ///     osFamily: string, # Required. Possible values are:
        /// 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1.
        /// 3 - OS Family 3, equivalent to Windows Server 2012.
        /// 4 - OS Family 4, equivalent to Windows Server 2012 R2.
        /// 5 - OS Family 5, equivalent to Windows Server 2016.
        /// 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        ///     osVersion: string, # Optional. The default value is * which specifies the latest operating system version for the specified OS family.
        ///   }, # Optional. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to &apos;UserSubscription&apos;.
        ///   virtualMachineConfiguration: {
        ///     imageReference: {
        ///       publisher: string, # Optional. For example, Canonical or MicrosoftWindowsServer.
        ///       offer: string, # Optional. For example, UbuntuServer or WindowsServer.
        ///       sku: string, # Optional. For example, 18.04-LTS or 2019-Datacenter.
        ///       version: string, # Optional. A value of &apos;latest&apos; can be specified to select the latest version of an Image. If omitted, the default is &apos;latest&apos;.
        ///       virtualMachineImageId: string, # Optional. This property is mutually exclusive with other ImageReference properties. The Shared Image Gallery Image must have replicas in the same region and must be in the same subscription as the Azure Batch account. If the image version is not specified in the imageId, the latest version will be used. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        ///       exactVersion: string, # Optional. The specific version of the platform image or marketplace image used to create the node. This read-only field differs from &apos;version&apos; only if the value specified for &apos;version&apos; when the pool was created was &apos;latest&apos;.
        ///     }, # Required. A reference to an Azure Virtual Machines Marketplace Image or a Shared Image Gallery Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the &apos;List Supported Images&apos; operation.
        ///     nodeAgentSKUId: string, # Required. The Batch Compute Node agent is a program that runs on each Compute Node in the Pool, and provides the command-and-control interface between the Compute Node and the Batch service. There are different implementations of the Compute Node agent, known as SKUs, for different operating systems. You must specify a Compute Node agent SKU which matches the selected Image reference. To get the list of supported Compute Node agent SKUs along with their list of verified Image references, see the &apos;List supported Compute Node agent SKUs&apos; operation.
        ///     windowsConfiguration: {
        ///       enableAutomaticUpdates: boolean, # Optional. If omitted, the default value is true.
        ///     }, # Optional. This property must not be specified if the imageReference property specifies a Linux OS Image.
        ///     dataDisks: [
        ///       {
        ///         lun: number, # Required. The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
        ///         caching: &quot;none&quot; | &quot;readonly&quot; | &quot;readwrite&quot;, # Optional. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        ///         diskSizeGB: number, # Required. The initial disk size in gigabytes.
        ///         storageAccountType: &quot;standard_lrs&quot; | &quot;premium_lrs&quot;, # Optional. If omitted, the default is &quot;standard_lrs&quot;.
        ///       }
        ///     ], # Optional. This property must be specified if the Compute Nodes in the Pool need to have empty data disks attached to them. This cannot be updated. Each Compute Node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the Compute Node is removed from the Pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
        ///     licenseType: string, # Optional. This only applies to Images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the Compute Nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        ///     containerConfiguration: {
        ///       type: string, # Required. The container technology to be used.
        ///       containerImageNames: [string], # Optional. This is the full Image reference, as would be specified to &quot;docker pull&quot;. An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
        ///       containerRegistries: [
        ///         {
        ///           username: string, # Optional. The user name to log into the registry server.
        ///           password: string, # Optional. The password to log into the registry server.
        ///           registryServer: string, # Optional. If omitted, the default is &quot;docker.io&quot;.
        ///           identityReference: {
        ///             resourceId: string, # Optional. The ARM resource id of the user assigned identity.
        ///           }, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///         }
        ///       ], # Optional. If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
        ///     }, # Optional. If specified, setup is performed on each Compute Node in the Pool to allow Tasks to run in containers. All regular Tasks and Job manager Tasks run on this Pool must specify the containerSettings property, and all other Tasks may specify it.
        ///     diskEncryptionConfiguration: {
        ///       targets: [&quot;osdisk&quot; | &quot;temporarydisk&quot;], # Optional. If omitted, no disks on the compute nodes in the pool will be encrypted. On Linux pool, only &quot;TemporaryDisk&quot; is supported; on Windows pool, &quot;OsDisk&quot; and &quot;TemporaryDisk&quot; must be specified.
        ///     }, # Optional. If specified, encryption is performed on each node in the pool during node provisioning.
        ///     nodePlacementConfiguration: {
        ///       policy: &quot;regional&quot; | &quot;zonal&quot;, # Optional. Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.
        ///     }, # Optional. This configuration will specify rules on how nodes in the pool will be physically allocated.
        ///     extensions: [
        ///       {
        ///         name: string, # Required. The name of the virtual machine extension.
        ///         publisher: string, # Required. The name of the extension handler publisher.
        ///         type: string, # Required. The type of the extension.
        ///         typeHandlerVersion: string, # Optional. The version of script handler.
        ///         autoUpgradeMinorVersion: boolean, # Optional. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        ///         settings: AnyObject, # Optional. JSON formatted public settings for the extension.
        ///         protectedSettings: AnyObject, # Optional. The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. 
        ///         provisionAfterExtensions: [string], # Optional. Collection of extension names after which this extension needs to be provisioned.
        ///       }
        ///     ], # Optional. If specified, the extensions mentioned in this configuration will be installed on each node.
        ///     osDisk: {
        ///       ephemeralOSDiskSettings: {
        ///         placement: string, # Optional. This property can be used by user in the request to choose the location e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.
        ///       }, # Optional. Specifies the ephemeral Disk Settings for the operating system disk used by the compute node (VM).
        ///     }, # Optional. Settings for the operating system disk of the compute node (VM).
        ///   }, # Optional. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
        ///   resizeErrors: [
        ///     {
        ///       code: string, # Optional. An identifier for the Pool resize error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the Pool resize error, intended to be suitable for display in a user interface.
        ///       values: [
        ///         {
        ///           name: string, # Optional. The name in the name-value pair.
        ///           value: string, # Optional. The value in the name-value pair.
        ///         }
        ///       ], # Optional. A list of additional error details related to the Pool resize error.
        ///     }
        ///   ], # Optional. This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady.
        ///   currentDedicatedNodes: number, # Optional. The number of dedicated Compute Nodes currently in the Pool.
        ///   currentLowPriorityNodes: number, # Optional. Spot/Low-priority Compute Nodes which have been preempted are included in this count.
        ///   targetDedicatedNodes: number, # Optional. The desired number of dedicated Compute Nodes in the Pool.
        ///   targetLowPriorityNodes: number, # Optional. The desired number of Spot/Low-priority Compute Nodes in the Pool.
        ///   enableAutoScale: boolean, # Optional. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.
        ///   autoScaleFormula: string, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleEvaluationInterval: string (duration ISO 8601 Format), # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleRun: {
        ///     timestamp: string (ISO 8601 Format), # Required. The time at which the autoscale formula was last evaluated.
        ///     results: string, # Optional. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        ///     error: {
        ///       code: string, # Optional. An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the autoscale error, intended to be suitable for display in a user interface.
        ///       values: [NameValuePair], # Optional. A list of additional error details related to the autoscale error.
        ///     }, # Optional. An error that occurred when executing or evaluating a Pool autoscale formula.
        ///   }, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   enableInterNodeCommunication: boolean, # Optional. This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool.
        ///   networkConfiguration: {
        ///     subnetId: string, # Optional. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn&apos;t have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The &apos;MicrosoftAzureBatch&apos; service principal must have the &apos;Classic Virtual Machine Contributor&apos; Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks (&apos;Microsoft.Network/virtualNetworks&apos;) are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        ///     dynamicVNetAssignmentScope: &quot;none&quot; | &quot;job&quot;, # Optional. The scope of dynamic vnet assignment.
        ///     endpointConfiguration: {
        ///       inboundNATPools: [
        ///         {
        ///           name: string, # Required. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
        ///           protocol: &quot;tcp&quot; | &quot;udp&quot;, # Required. The protocol of the endpoint.
        ///           backendPort: number, # Required. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeStart: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeEnd: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           networkSecurityGroupRules: [
        ///             {
        ///               priority: number, # Required. Priorities within a Pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
        ///               access: &quot;allow&quot; | &quot;deny&quot;, # Required. The action that should be taken for a specified IP address, subnet range or tag.
        ///               sourceAddressPrefix: string, # Required. Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
        ///               sourcePortRanges: [string], # Optional. Valid values are &apos;*&apos; (for all ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0 to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port). If any other values are provided the request fails with HTTP status code 400. The default value is &apos;*&apos;.
        ///             }
        ///           ], # Optional. The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
        ///         }
        ///       ], # Required. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        ///     }, # Optional. Pool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
        ///     publicIPAddressConfiguration: {
        ///       provision: &quot;batchmanaged&quot; | &quot;usermanaged&quot; | &quot;nopublicipaddresses&quot;, # Optional. The default value is BatchManaged.
        ///       ipAddressIds: [string], # Optional. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        ///     }, # Optional. Public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
        ///   }, # Optional. The network configuration for a Pool.
        ///   startTask: {
        ///     commandLine: string, # Required. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using &quot;cmd /c MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        ///     containerSettings: {
        ///       containerRunOptions: string, # Optional. These additional options are supplied as arguments to the &quot;docker create&quot; command, in addition to those controlled by the Batch Service.
        ///       imageName: string, # Required. This is the full Image reference, as would be specified to &quot;docker pull&quot;. If no tag is provided as part of the Image name, the tag &quot;:latest&quot; is used as a default.
        ///       registry: ContainerRegistry, # Optional. This setting can be omitted if was already provided at Pool creation.
        ///       workingDirectory: &quot;taskWorkingDirectory&quot; | &quot;containerImageDefault&quot;, # Optional. The default is &apos;taskWorkingDirectory&apos;.
        ///     }, # Optional. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
        ///         storageContainerUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access.
        ///         httpUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access.
        ///         blobPrefix: string, # Optional. The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        ///         filePath: string, # Optional. If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task&apos;s working directory (for example by using &apos;..&apos;).
        ///         fileMode: string, # Optional. This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }
        ///     ], # Optional. Files listed under this element are located in the Task&apos;s working directory.
        ///     environmentSettings: [
        ///       {
        ///         name: string, # Required. The name of the environment variable.
        ///         value: string, # Optional. The value of the environment variable.
        ///       }
        ///     ], # Optional. A list of environment variable settings for the StartTask.
        ///     userIdentity: {
        ///       username: string, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///       autoUser: {
        ///         scope: &quot;task&quot; | &quot;pool&quot;, # Optional. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.
        ///         elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       }, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///     }, # Optional. If omitted, the Task runs as a non-administrative user unique to the Task.
        ///     maxTaskRetryCount: number, # Optional. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)
        ///     waitForSuccess: boolean, # Optional. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        ///   }, # Optional. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
        ///   certificateReferences: [
        ///     {
        ///       thumbprint: string, # Required. The thumbprint of the Certificate.
        ///       thumbprintAlgorithm: string, # Required. The algorithm with which the thumbprint is associated. This must be sha1.
        ///       storeLocation: &quot;currentuser&quot; | &quot;localmachine&quot;, # Optional. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///       storeName: string, # Optional. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
        ///       visibility: [&quot;starttask&quot; | &quot;task&quot; | &quot;remoteuser&quot;], # Optional. You can specify more than one visibility in this collection. The default is all Accounts.
        ///     }
        ///   ], # Optional. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///   applicationPackageReferences: [
        ///     {
        ///       applicationId: string, # Required. The ID of the application to deploy.
        ///       version: string, # Optional. If this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error.
        ///     }
        ///   ], # Optional. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
        ///   applicationLicenses: [string], # Optional. The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.
        ///   taskSlotsPerNode: number, # Optional. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        ///   taskSchedulingPolicy: {
        ///     nodeFillType: &quot;spread&quot; | &quot;pack&quot;, # Required. If not specified, the default is spread.
        ///   }, # Optional. If not specified, the default is spread.
        ///   userAccounts: [
        ///     {
        ///       name: string, # Required. The name of the user Account.
        ///       password: string, # Required. The password for the user Account.
        ///       elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       linuxUserConfiguration: {
        ///         uid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
        ///         gid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
        ///         sshPrivateKey: string, # Optional. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool&apos;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&apos;s .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user&apos;s .ssh directory is done).
        ///       }, # Optional. This property is ignored if specified on a Windows Pool. If not specified, the user is created with the default options.
        ///       windowsUserConfiguration: {
        ///         loginMode: &quot;batch&quot; | &quot;interactive&quot;, # Optional. The default value for VirtualMachineConfiguration Pools is &apos;batch&apos; and for CloudServiceConfiguration Pools is &apos;interactive&apos;.
        ///       }, # Optional. This property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
        ///     }
        ///   ], # Optional. The list of user Accounts to be created on each Compute Node in the Pool.
        ///   metadata: [
        ///     {
        ///       name: string, # Required. The name of the metadata item.
        ///       value: string, # Required. The value of the metadata item.
        ///     }
        ///   ], # Optional. A list of name-value pairs associated with the Pool as metadata.
        ///   stats: {
        ///     url: string, # Required. The URL for the statistics.
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     usageStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       dedicatedCoreTime: string (duration ISO 8601 Format), # Required. The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        ///     }, # Optional. Statistics related to Pool usage information.
        ///     resourceStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       avgCPUPercentage: number, # Required. The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        ///       avgMemoryGiB: number, # Required. The average memory usage in GiB across all Compute Nodes in the Pool.
        ///       peakMemoryGiB: number, # Required. The peak memory usage in GiB across all Compute Nodes in the Pool.
        ///       avgDiskGiB: number, # Required. The average used disk space in GiB across all Compute Nodes in the Pool.
        ///       peakDiskGiB: number, # Required. The peak used disk space in GiB across all Compute Nodes in the Pool.
        ///       diskReadIOps: number, # Required. The total number of disk read operations across all Compute Nodes in the Pool.
        ///       diskWriteIOps: number, # Required. The total number of disk write operations across all Compute Nodes in the Pool.
        ///       diskReadGiB: number, # Required. The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        ///       diskWriteGiB: number, # Required. The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        ///       networkReadGiB: number, # Required. The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        ///       networkWriteGiB: number, # Required. The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        ///     }, # Optional. Statistics related to resource consumption by Compute Nodes in a Pool.
        ///   }, # Optional. This property is populated only if the CloudPool was retrieved with an expand clause including the &apos;stats&apos; attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        ///   mountConfiguration: [
        ///     {
        ///       azureBlobFileSystemConfiguration: {
        ///         accountName: string, # Required. The Azure Storage Account name.
        ///         containerName: string, # Required. The Azure Blob Storage Container name.
        ///         accountKey: string, # Optional. This property is mutually exclusive with both sasKey and identity; exactly one must be specified.
        ///         sasKey: string, # Optional. This property is mutually exclusive with both accountKey and identity; exactly one must be specified.
        ///         blobfuseOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. This property is mutually exclusive with both accountKey and sasKey; exactly one must be specified.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       nfsMountConfiguration: {
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       cifsMountConfiguration: {
        ///         username: string, # Required. The user to use for authentication against the CIFS file system.
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         password: string, # Required. The password to use for authentication against the CIFS file system.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       azureFileShareConfiguration: {
        ///         accountName: string, # Required. The Azure Storage account name.
        ///         azureFileUrl: string, # Required. This is of the form &apos;https://{account}.file.core.windows.net/&apos;.
        ///         accountKey: string, # Required. The Azure Storage account key.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///     }
        ///   ], # Optional. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        ///   identity: {
        ///     type: &quot;UserAssigned&quot; | &quot;None&quot;, # Required. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///     userAssignedIdentities: [
        ///       {
        ///         resourceId: string, # Required. The ARM resource id of the user assigned identity
        ///         clientId: string, # Optional. The client id of the user assigned identity.
        ///         principalId: string, # Optional. The principal id of the user assigned identity.
        ///       }
        ///     ], # Optional. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///   }, # Optional. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetPool(string poolId, string select = null, string expand = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.GetPool");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPoolRequest(poolId, select, expand, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties of the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PatchAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PatchAsync("<poolId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PatchAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     startTask = new {
        ///         commandLine = "<commandLine>",
        ///         containerSettings = new {
        ///             containerRunOptions = "<containerRunOptions>",
        ///             imageName = "<imageName>",
        ///             registry = new {
        ///                 username = "<username>",
        ///                 password = "<password>",
        ///                 registryServer = "<registryServer>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             },
        ///             workingDirectory = "taskWorkingDirectory",
        ///         },
        ///         resourceFiles = new[] {
        ///             new {
        ///                 autoStorageContainerName = "<autoStorageContainerName>",
        ///                 storageContainerUrl = "<storageContainerUrl>",
        ///                 httpUrl = "<httpUrl>",
        ///                 blobPrefix = "<blobPrefix>",
        ///                 filePath = "<filePath>",
        ///                 fileMode = "<fileMode>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             }
        ///         },
        ///         environmentSettings = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 value = "<value>",
        ///             }
        ///         },
        ///         userIdentity = new {
        ///             username = "<username>",
        ///             autoUser = new {
        ///                 scope = "task",
        ///                 elevationLevel = "nonadmin",
        ///             },
        ///         },
        ///         maxTaskRetryCount = 1234,
        ///         waitForSuccess = true,
        ///     },
        ///     certificateReferences = new[] {
        ///         new {
        ///             thumbprint = "<thumbprint>",
        ///             thumbprintAlgorithm = "<thumbprintAlgorithm>",
        ///             storeLocation = "currentuser",
        ///             storeName = "<storeName>",
        ///             visibility = new[] {
        ///                 "starttask"
        ///             },
        ///         }
        ///     },
        ///     applicationPackageReferences = new[] {
        ///         new {
        ///             applicationId = "<applicationId>",
        ///             version = "<version>",
        ///         }
        ///     },
        ///     metadata = new[] {
        ///         new {
        ///             name = "<name>",
        ///             value = "<value>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.PatchAsync("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// This only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing StartTask.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PoolUpdate</c>:
        /// <code>{
        ///   startTask: {
        ///     commandLine: string, # Required. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using &quot;cmd /c MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        ///     containerSettings: {
        ///       containerRunOptions: string, # Optional. These additional options are supplied as arguments to the &quot;docker create&quot; command, in addition to those controlled by the Batch Service.
        ///       imageName: string, # Required. This is the full Image reference, as would be specified to &quot;docker pull&quot;. If no tag is provided as part of the Image name, the tag &quot;:latest&quot; is used as a default.
        ///       registry: {
        ///         username: string, # Optional. The user name to log into the registry server.
        ///         password: string, # Optional. The password to log into the registry server.
        ///         registryServer: string, # Optional. If omitted, the default is &quot;docker.io&quot;.
        ///         identityReference: {
        ///           resourceId: string, # Optional. The ARM resource id of the user assigned identity.
        ///         }, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }, # Optional. This setting can be omitted if was already provided at Pool creation.
        ///       workingDirectory: &quot;taskWorkingDirectory&quot; | &quot;containerImageDefault&quot;, # Optional. The default is &apos;taskWorkingDirectory&apos;.
        ///     }, # Optional. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
        ///         storageContainerUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access.
        ///         httpUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access.
        ///         blobPrefix: string, # Optional. The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        ///         filePath: string, # Optional. If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task&apos;s working directory (for example by using &apos;..&apos;).
        ///         fileMode: string, # Optional. This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }
        ///     ], # Optional. Files listed under this element are located in the Task&apos;s working directory.
        ///     environmentSettings: [
        ///       {
        ///         name: string, # Required. The name of the environment variable.
        ///         value: string, # Optional. The value of the environment variable.
        ///       }
        ///     ], # Optional. A list of environment variable settings for the StartTask.
        ///     userIdentity: {
        ///       username: string, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///       autoUser: {
        ///         scope: &quot;task&quot; | &quot;pool&quot;, # Optional. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.
        ///         elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       }, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///     }, # Optional. If omitted, the Task runs as a non-administrative user unique to the Task.
        ///     maxTaskRetryCount: number, # Optional. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)
        ///     waitForSuccess: boolean, # Optional. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        ///   }, # Optional. If this element is present, it overwrites any existing StartTask. If omitted, any existing StartTask is left unchanged.
        ///   certificateReferences: [
        ///     {
        ///       thumbprint: string, # Required. The thumbprint of the Certificate.
        ///       thumbprintAlgorithm: string, # Required. The algorithm with which the thumbprint is associated. This must be sha1.
        ///       storeLocation: &quot;currentuser&quot; | &quot;localmachine&quot;, # Optional. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///       storeName: string, # Optional. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
        ///       visibility: [&quot;starttask&quot; | &quot;task&quot; | &quot;remoteuser&quot;], # Optional. You can specify more than one visibility in this collection. The default is all Accounts.
        ///     }
        ///   ], # Optional. If this element is present, it replaces any existing Certificate references configured on the Pool. If omitted, any existing Certificate references are left unchanged. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///   applicationPackageReferences: [
        ///     {
        ///       applicationId: string, # Required. The ID of the application to deploy.
        ///       version: string, # Optional. If this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error.
        ///     }
        ///   ], # Optional. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. If this element is present, it replaces any existing Package references. If you specify an empty collection, then all Package references are removed from the Pool. If omitted, any existing Package references are left unchanged.
        ///   metadata: [
        ///     {
        ///       name: string, # Required. The name of the metadata item.
        ///       value: string, # Required. The value of the metadata item.
        ///     }
        ///   ], # Optional. If this element is present, it replaces any existing metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the Pool. If omitted, any existing metadata is left unchanged.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PatchAsync(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.Patch");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties of the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Patch with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.Patch("<poolId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call Patch with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     startTask = new {
        ///         commandLine = "<commandLine>",
        ///         containerSettings = new {
        ///             containerRunOptions = "<containerRunOptions>",
        ///             imageName = "<imageName>",
        ///             registry = new {
        ///                 username = "<username>",
        ///                 password = "<password>",
        ///                 registryServer = "<registryServer>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             },
        ///             workingDirectory = "taskWorkingDirectory",
        ///         },
        ///         resourceFiles = new[] {
        ///             new {
        ///                 autoStorageContainerName = "<autoStorageContainerName>",
        ///                 storageContainerUrl = "<storageContainerUrl>",
        ///                 httpUrl = "<httpUrl>",
        ///                 blobPrefix = "<blobPrefix>",
        ///                 filePath = "<filePath>",
        ///                 fileMode = "<fileMode>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             }
        ///         },
        ///         environmentSettings = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 value = "<value>",
        ///             }
        ///         },
        ///         userIdentity = new {
        ///             username = "<username>",
        ///             autoUser = new {
        ///                 scope = "task",
        ///                 elevationLevel = "nonadmin",
        ///             },
        ///         },
        ///         maxTaskRetryCount = 1234,
        ///         waitForSuccess = true,
        ///     },
        ///     certificateReferences = new[] {
        ///         new {
        ///             thumbprint = "<thumbprint>",
        ///             thumbprintAlgorithm = "<thumbprintAlgorithm>",
        ///             storeLocation = "currentuser",
        ///             storeName = "<storeName>",
        ///             visibility = new[] {
        ///                 "starttask"
        ///             },
        ///         }
        ///     },
        ///     applicationPackageReferences = new[] {
        ///         new {
        ///             applicationId = "<applicationId>",
        ///             version = "<version>",
        ///         }
        ///     },
        ///     metadata = new[] {
        ///         new {
        ///             name = "<name>",
        ///             value = "<value>",
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.Patch("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// This only replaces the Pool properties specified in the request. For example, if the Pool has a StartTask associated with it, and a request does not specify a StartTask element, then the Pool keeps the existing StartTask.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PoolUpdate</c>:
        /// <code>{
        ///   startTask: {
        ///     commandLine: string, # Required. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using &quot;cmd /c MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        ///     containerSettings: {
        ///       containerRunOptions: string, # Optional. These additional options are supplied as arguments to the &quot;docker create&quot; command, in addition to those controlled by the Batch Service.
        ///       imageName: string, # Required. This is the full Image reference, as would be specified to &quot;docker pull&quot;. If no tag is provided as part of the Image name, the tag &quot;:latest&quot; is used as a default.
        ///       registry: {
        ///         username: string, # Optional. The user name to log into the registry server.
        ///         password: string, # Optional. The password to log into the registry server.
        ///         registryServer: string, # Optional. If omitted, the default is &quot;docker.io&quot;.
        ///         identityReference: {
        ///           resourceId: string, # Optional. The ARM resource id of the user assigned identity.
        ///         }, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }, # Optional. This setting can be omitted if was already provided at Pool creation.
        ///       workingDirectory: &quot;taskWorkingDirectory&quot; | &quot;containerImageDefault&quot;, # Optional. The default is &apos;taskWorkingDirectory&apos;.
        ///     }, # Optional. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
        ///         storageContainerUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access.
        ///         httpUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access.
        ///         blobPrefix: string, # Optional. The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        ///         filePath: string, # Optional. If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task&apos;s working directory (for example by using &apos;..&apos;).
        ///         fileMode: string, # Optional. This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }
        ///     ], # Optional. Files listed under this element are located in the Task&apos;s working directory.
        ///     environmentSettings: [
        ///       {
        ///         name: string, # Required. The name of the environment variable.
        ///         value: string, # Optional. The value of the environment variable.
        ///       }
        ///     ], # Optional. A list of environment variable settings for the StartTask.
        ///     userIdentity: {
        ///       username: string, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///       autoUser: {
        ///         scope: &quot;task&quot; | &quot;pool&quot;, # Optional. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.
        ///         elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       }, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///     }, # Optional. If omitted, the Task runs as a non-administrative user unique to the Task.
        ///     maxTaskRetryCount: number, # Optional. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)
        ///     waitForSuccess: boolean, # Optional. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        ///   }, # Optional. If this element is present, it overwrites any existing StartTask. If omitted, any existing StartTask is left unchanged.
        ///   certificateReferences: [
        ///     {
        ///       thumbprint: string, # Required. The thumbprint of the Certificate.
        ///       thumbprintAlgorithm: string, # Required. The algorithm with which the thumbprint is associated. This must be sha1.
        ///       storeLocation: &quot;currentuser&quot; | &quot;localmachine&quot;, # Optional. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///       storeName: string, # Optional. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
        ///       visibility: [&quot;starttask&quot; | &quot;task&quot; | &quot;remoteuser&quot;], # Optional. You can specify more than one visibility in this collection. The default is all Accounts.
        ///     }
        ///   ], # Optional. If this element is present, it replaces any existing Certificate references configured on the Pool. If omitted, any existing Certificate references are left unchanged. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///   applicationPackageReferences: [
        ///     {
        ///       applicationId: string, # Required. The ID of the application to deploy.
        ///       version: string, # Optional. If this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error.
        ///     }
        ///   ], # Optional. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. If this element is present, it replaces any existing Package references. If you specify an empty collection, then all Package references are removed from the Pool. If omitted, any existing Package references are left unchanged.
        ///   metadata: [
        ///     {
        ///       name: string, # Required. The name of the metadata item.
        ///       value: string, # Required. The value of the metadata item.
        ///     }
        ///   ], # Optional. If this element is present, it replaces any existing metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the Pool. If omitted, any existing metadata is left unchanged.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Patch(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.Patch");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Disables automatic scaling for a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool on which to disable automatic scaling. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DisableAutoScaleAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.DisableAutoScaleAsync("<poolId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call DisableAutoScaleAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.DisableAutoScaleAsync("<poolId>", 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DisableAutoScaleAsync(string poolId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.DisableAutoScale");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDisableAutoScaleRequest(poolId, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Disables automatic scaling for a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool on which to disable automatic scaling. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DisableAutoScale with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.DisableAutoScale("<poolId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call DisableAutoScale with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.DisableAutoScale("<poolId>", 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DisableAutoScale(string poolId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.DisableAutoScale");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDisableAutoScaleRequest(poolId, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Enables automatic scaling for a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool on which to enable automatic scaling. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call EnableAutoScaleAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.EnableAutoScaleAsync("<poolId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call EnableAutoScaleAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     autoScaleFormula = "<autoScaleFormula>",
        ///     autoScaleEvaluationInterval = PT1H23M45S,
        /// };
        /// 
        /// Response response = await client.EnableAutoScaleAsync("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same Pool more than once every 30 seconds.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PoolEnableAutoScaleParameter</c>:
        /// <code>{
        ///   autoScaleFormula: string, # Optional. The formula is checked for validity before it is applied to the Pool. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see Automatically scale Compute Nodes in an Azure Batch Pool (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
        ///   autoScaleEvaluationInterval: string (duration ISO 8601 Format), # Optional. The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If you specify a new interval, then the existing autoscale evaluation schedule will be stopped and a new autoscale evaluation schedule will be started, with its starting time being the time when this request was issued.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> EnableAutoScaleAsync(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.EnableAutoScale");
            scope.Start();
            try
            {
                using HttpMessage message = CreateEnableAutoScaleRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Enables automatic scaling for a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool on which to enable automatic scaling. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call EnableAutoScale with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.EnableAutoScale("<poolId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call EnableAutoScale with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     autoScaleFormula = "<autoScaleFormula>",
        ///     autoScaleEvaluationInterval = PT1H23M45S,
        /// };
        /// 
        /// Response response = client.EnableAutoScale("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// You cannot enable automatic scaling on a Pool if a resize operation is in progress on the Pool. If automatic scaling of the Pool is currently disabled, you must specify a valid autoscale formula as part of the request. If automatic scaling of the Pool is already enabled, you may specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for the same Pool more than once every 30 seconds.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PoolEnableAutoScaleParameter</c>:
        /// <code>{
        ///   autoScaleFormula: string, # Optional. The formula is checked for validity before it is applied to the Pool. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see Automatically scale Compute Nodes in an Azure Batch Pool (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
        ///   autoScaleEvaluationInterval: string (duration ISO 8601 Format), # Optional. The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If you specify a new interval, then the existing autoscale evaluation schedule will be stopped and a new autoscale evaluation schedule will be started, with its starting time being the time when this request was issued.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response EnableAutoScale(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.EnableAutoScale");
            scope.Start();
            try
            {
                using HttpMessage message = CreateEnableAutoScaleRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the result of evaluating an automatic scaling formula on the Pool. </summary>
        /// <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call EvaluateAutoScaleAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     autoScaleFormula = "<autoScaleFormula>",
        /// };
        /// 
        /// Response response = await client.EvaluateAutoScaleAsync("<poolId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("timestamp").ToString());
        /// ]]></code>
        /// This sample shows how to call EvaluateAutoScaleAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     autoScaleFormula = "<autoScaleFormula>",
        /// };
        /// 
        /// Response response = await client.EvaluateAutoScaleAsync("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("timestamp").ToString());
        /// Console.WriteLine(result.GetProperty("results").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula.
        /// 
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PoolEvaluateAutoScaleParameter</c>:
        /// <code>{
        ///   autoScaleFormula: string, # Required. The formula is validated and its results calculated, but it is not applied to the Pool. To apply the formula to the Pool, &apos;Enable automatic scaling on a Pool&apos;. For more information about specifying this formula, see Automatically scale Compute Nodes in an Azure Batch Pool (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AutoScaleRun</c>:
        /// <code>{
        ///   timestamp: string (ISO 8601 Format), # Required. The time at which the autoscale formula was last evaluated.
        ///   results: string, # Optional. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        ///   error: {
        ///     code: string, # Optional. An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        ///     message: string, # Optional. A message describing the autoscale error, intended to be suitable for display in a user interface.
        ///     values: [
        ///       {
        ///         name: string, # Optional. The name in the name-value pair.
        ///         value: string, # Optional. The value in the name-value pair.
        ///       }
        ///     ], # Optional. A list of additional error details related to the autoscale error.
        ///   }, # Optional. An error that occurred when executing or evaluating a Pool autoscale formula.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> EvaluateAutoScaleAsync(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.EvaluateAutoScale");
            scope.Start();
            try
            {
                using HttpMessage message = CreateEvaluateAutoScaleRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the result of evaluating an automatic scaling formula on the Pool. </summary>
        /// <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call EvaluateAutoScale with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     autoScaleFormula = "<autoScaleFormula>",
        /// };
        /// 
        /// Response response = client.EvaluateAutoScale("<poolId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("timestamp").ToString());
        /// ]]></code>
        /// This sample shows how to call EvaluateAutoScale with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     autoScaleFormula = "<autoScaleFormula>",
        /// };
        /// 
        /// Response response = client.EvaluateAutoScale("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("timestamp").ToString());
        /// Console.WriteLine(result.GetProperty("results").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// This API is primarily for validating an autoscale formula, as it simply returns the result without applying the formula to the Pool. The Pool must have auto scaling enabled in order to evaluate a formula.
        /// 
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PoolEvaluateAutoScaleParameter</c>:
        /// <code>{
        ///   autoScaleFormula: string, # Required. The formula is validated and its results calculated, but it is not applied to the Pool. To apply the formula to the Pool, &apos;Enable automatic scaling on a Pool&apos;. For more information about specifying this formula, see Automatically scale Compute Nodes in an Azure Batch Pool (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AutoScaleRun</c>:
        /// <code>{
        ///   timestamp: string (ISO 8601 Format), # Required. The time at which the autoscale formula was last evaluated.
        ///   results: string, # Optional. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        ///   error: {
        ///     code: string, # Optional. An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        ///     message: string, # Optional. A message describing the autoscale error, intended to be suitable for display in a user interface.
        ///     values: [
        ///       {
        ///         name: string, # Optional. The name in the name-value pair.
        ///         value: string, # Optional. The value in the name-value pair.
        ///       }
        ///     ], # Optional. A list of additional error details related to the autoscale error.
        ///   }, # Optional. An error that occurred when executing or evaluating a Pool autoscale formula.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response EvaluateAutoScale(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.EvaluateAutoScale");
            scope.Start();
            try
            {
                using HttpMessage message = CreateEvaluateAutoScaleRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Changes the number of Compute Nodes that are assigned to a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to resize. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ResizeAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.ResizeAsync("<poolId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call ResizeAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     targetDedicatedNodes = 1234,
        ///     targetLowPriorityNodes = 1234,
        ///     resizeTimeout = PT1H23M45S,
        ///     nodeDeallocationOption = "requeue",
        /// };
        /// 
        /// Response response = await client.ResizeAsync("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// You can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request fails with status code 409. When you resize a Pool, the Pool&apos;s allocation state changes from steady to resizing. You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To remove specific Compute Nodes, use the Pool remove Compute Nodes API instead.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PoolResizeParameter</c>:
        /// <code>{
        ///   targetDedicatedNodes: number, # Optional. The desired number of dedicated Compute Nodes in the Pool.
        ///   targetLowPriorityNodes: number, # Optional. The desired number of Spot/Low-priority Compute Nodes in the Pool.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
        ///   nodeDeallocationOption: &quot;requeue&quot; | &quot;terminate&quot; | &quot;taskcompletion&quot; | &quot;retaineddata&quot;, # Optional. The default value is requeue.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> ResizeAsync(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.Resize");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResizeRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Changes the number of Compute Nodes that are assigned to a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to resize. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Resize with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.Resize("<poolId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call Resize with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     targetDedicatedNodes = 1234,
        ///     targetLowPriorityNodes = 1234,
        ///     resizeTimeout = PT1H23M45S,
        ///     nodeDeallocationOption = "requeue",
        /// };
        /// 
        /// Response response = client.Resize("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// You can only resize a Pool when its allocation state is steady. If the Pool is already resizing, the request fails with status code 409. When you resize a Pool, the Pool&apos;s allocation state changes from steady to resizing. You cannot resize Pools which are configured for automatic scaling. If you try to do this, the Batch service returns an error 409. If you resize a Pool downwards, the Batch service chooses which Compute Nodes to remove. To remove specific Compute Nodes, use the Pool remove Compute Nodes API instead.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PoolResizeParameter</c>:
        /// <code>{
        ///   targetDedicatedNodes: number, # Optional. The desired number of dedicated Compute Nodes in the Pool.
        ///   targetLowPriorityNodes: number, # Optional. The desired number of Spot/Low-priority Compute Nodes in the Pool.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
        ///   nodeDeallocationOption: &quot;requeue&quot; | &quot;terminate&quot; | &quot;taskcompletion&quot; | &quot;retaineddata&quot;, # Optional. The default value is requeue.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Resize(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.Resize");
            scope.Start();
            try
            {
                using HttpMessage message = CreateResizeRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stops an ongoing resize operation on the Pool. </summary>
        /// <param name="poolId"> The ID of the Pool whose resizing you want to stop. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call StopResizeAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.StopResizeAsync("<poolId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call StopResizeAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = await client.StopResizeAsync("<poolId>", 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> This does not restore the Pool to its previous state before the resize operation: it only stops any further changes being made, and the Pool maintains its current state. After stopping, the Pool stabilizes at the number of Compute Nodes it was at when the stop operation was done. During the stop operation, the Pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize Pool request; this API can also be used to halt the initial sizing of the Pool when it is created. </remarks>
        public virtual async Task<Response> StopResizeAsync(string poolId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.StopResize");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStopResizeRequest(poolId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stops an ongoing resize operation on the Pool. </summary>
        /// <param name="poolId"> The ID of the Pool whose resizing you want to stop. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call StopResize with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.StopResize("<poolId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call StopResize with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// Response response = client.StopResize("<poolId>", 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks> This does not restore the Pool to its previous state before the resize operation: it only stops any further changes being made, and the Pool maintains its current state. After stopping, the Pool stabilizes at the number of Compute Nodes it was at when the stop operation was done. During the stop operation, the Pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize Pool request; this API can also be used to halt the initial sizing of the Pool when it is created. </remarks>
        public virtual Response StopResize(string poolId, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.StopResize");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStopResizeRequest(poolId, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties of the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UpdatePropertiesAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdatePropertiesAsync("<poolId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call UpdatePropertiesAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     id = "<id>",
        ///     displayName = "<displayName>",
        ///     vmSize = "<vmSize>",
        ///     cloudServiceConfiguration = new {
        ///         osFamily = "<osFamily>",
        ///         osVersion = "<osVersion>",
        ///     },
        ///     virtualMachineConfiguration = new {
        ///         imageReference = new {
        ///             publisher = "<publisher>",
        ///             offer = "<offer>",
        ///             sku = "<sku>",
        ///             version = "<version>",
        ///             virtualMachineImageId = "<virtualMachineImageId>",
        ///         },
        ///         nodeAgentSKUId = "<nodeAgentSKUId>",
        ///         windowsConfiguration = new {
        ///             enableAutomaticUpdates = true,
        ///         },
        ///         dataDisks = new[] {
        ///             new {
        ///                 lun = 1234,
        ///                 caching = "none",
        ///                 diskSizeGB = 1234,
        ///                 storageAccountType = "standard_lrs",
        ///             }
        ///         },
        ///         licenseType = "<licenseType>",
        ///         containerConfiguration = new {
        ///             type = "<type>",
        ///             containerImageNames = new[] {
        ///                 "<String>"
        ///             },
        ///             containerRegistries = new[] {
        ///                 new {
        ///                     username = "<username>",
        ///                     password = "<password>",
        ///                     registryServer = "<registryServer>",
        ///                     identityReference = new {
        ///                         resourceId = "<resourceId>",
        ///                     },
        ///                 }
        ///             },
        ///         },
        ///         diskEncryptionConfiguration = new {
        ///             targets = new[] {
        ///                 "osdisk"
        ///             },
        ///         },
        ///         nodePlacementConfiguration = new {
        ///             policy = "regional",
        ///         },
        ///         extensions = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 publisher = "<publisher>",
        ///                 type = "<type>",
        ///                 typeHandlerVersion = "<typeHandlerVersion>",
        ///                 autoUpgradeMinorVersion = true,
        ///                 settings = new {},
        ///                 protectedSettings = new {},
        ///                 provisionAfterExtensions = new[] {
        ///                     "<String>"
        ///                 },
        ///             }
        ///         },
        ///         osDisk = new {
        ///             ephemeralOSDiskSettings = new {
        ///                 placement = "<placement>",
        ///             },
        ///         },
        ///     },
        ///     resizeTimeout = PT1H23M45S,
        ///     targetDedicatedNodes = 1234,
        ///     targetLowPriorityNodes = 1234,
        ///     enableAutoScale = true,
        ///     autoScaleFormula = "<autoScaleFormula>",
        ///     autoScaleEvaluationInterval = PT1H23M45S,
        ///     enableInterNodeCommunication = true,
        ///     networkConfiguration = new {
        ///         subnetId = "<subnetId>",
        ///         dynamicVNetAssignmentScope = "none",
        ///         endpointConfiguration = new {
        ///             inboundNATPools = new[] {
        ///                 new {
        ///                     name = "<name>",
        ///                     protocol = "tcp",
        ///                     backendPort = 1234,
        ///                     frontendPortRangeStart = 1234,
        ///                     frontendPortRangeEnd = 1234,
        ///                     networkSecurityGroupRules = new[] {
        ///                         new {
        ///                             priority = 1234,
        ///                             access = "allow",
        ///                             sourceAddressPrefix = "<sourceAddressPrefix>",
        ///                             sourcePortRanges = new[] {
        ///                                 "<String>"
        ///                             },
        ///                         }
        ///                     },
        ///                 }
        ///             },
        ///         },
        ///         publicIPAddressConfiguration = new {
        ///             provision = "batchmanaged",
        ///             ipAddressIds = new[] {
        ///                 "<String>"
        ///             },
        ///         },
        ///     },
        ///     startTask = new {
        ///         commandLine = "<commandLine>",
        ///         containerSettings = new {
        ///             containerRunOptions = "<containerRunOptions>",
        ///             imageName = "<imageName>",
        ///             registry = new {
        ///                 username = "<username>",
        ///                 password = "<password>",
        ///                 registryServer = "<registryServer>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             },
        ///             workingDirectory = "taskWorkingDirectory",
        ///         },
        ///         resourceFiles = new[] {
        ///             new {
        ///                 autoStorageContainerName = "<autoStorageContainerName>",
        ///                 storageContainerUrl = "<storageContainerUrl>",
        ///                 httpUrl = "<httpUrl>",
        ///                 blobPrefix = "<blobPrefix>",
        ///                 filePath = "<filePath>",
        ///                 fileMode = "<fileMode>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             }
        ///         },
        ///         environmentSettings = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 value = "<value>",
        ///             }
        ///         },
        ///         userIdentity = new {
        ///             username = "<username>",
        ///             autoUser = new {
        ///                 scope = "task",
        ///                 elevationLevel = "nonadmin",
        ///             },
        ///         },
        ///         maxTaskRetryCount = 1234,
        ///         waitForSuccess = true,
        ///     },
        ///     certificateReferences = new[] {
        ///         new {
        ///             thumbprint = "<thumbprint>",
        ///             thumbprintAlgorithm = "<thumbprintAlgorithm>",
        ///             storeLocation = "currentuser",
        ///             storeName = "<storeName>",
        ///             visibility = new[] {
        ///                 "starttask"
        ///             },
        ///         }
        ///     },
        ///     applicationPackageReferences = new[] {
        ///         new {
        ///             applicationId = "<applicationId>",
        ///             version = "<version>",
        ///         }
        ///     },
        ///     applicationLicenses = new[] {
        ///         "<String>"
        ///     },
        ///     taskSlotsPerNode = 1234,
        ///     taskSchedulingPolicy = new {
        ///         nodeFillType = "spread",
        ///     },
        ///     userAccounts = new[] {
        ///         new {
        ///             name = "<name>",
        ///             password = "<password>",
        ///             elevationLevel = "nonadmin",
        ///             linuxUserConfiguration = new {
        ///                 uid = 1234,
        ///                 gid = 1234,
        ///                 sshPrivateKey = "<sshPrivateKey>",
        ///             },
        ///             windowsUserConfiguration = new {
        ///                 loginMode = "batch",
        ///             },
        ///         }
        ///     },
        ///     metadata = new[] {
        ///         new {
        ///             name = "<name>",
        ///             value = "<value>",
        ///         }
        ///     },
        ///     mountConfiguration = new[] {
        ///         new {
        ///             azureBlobFileSystemConfiguration = new {
        ///                 accountName = "<accountName>",
        ///                 containerName = "<containerName>",
        ///                 accountKey = "<accountKey>",
        ///                 sasKey = "<sasKey>",
        ///                 blobfuseOptions = "<blobfuseOptions>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             },
        ///             nfsMountConfiguration = new {
        ///                 source = "<source>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///             },
        ///             cifsMountConfiguration = new {
        ///                 username = "<username>",
        ///                 source = "<source>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///                 password = "<password>",
        ///             },
        ///             azureFileShareConfiguration = new {
        ///                 accountName = "<accountName>",
        ///                 azureFileUrl = "<azureFileUrl>",
        ///                 accountKey = "<accountKey>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///             },
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.UpdatePropertiesAsync("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// This fully replaces all the updatable properties of the Pool. For example, if the Pool has a StartTask associated with it and if StartTask is not specified with this request, then the Batch service will remove the existing StartTask.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Pool</c>:
        /// <code>{
        ///   id: string, # Optional. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
        ///   displayName: string, # Optional. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        ///   url: string, # Optional. The URL of the Pool.
        ///   eTag: string, # Optional. This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime.
        ///   lastModified: string (ISO 8601 Format), # Optional. This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
        ///   creationTime: string (ISO 8601 Format), # Optional. The creation time of the Pool.
        ///   state: &quot;active&quot; | &quot;deleting&quot;, # Optional. The current state of the Pool.
        ///   stateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current state.
        ///   allocationState: &quot;steady&quot; | &quot;resizing&quot; | &quot;stopping&quot;, # Optional. Whether the Pool is resizing.
        ///   allocationStateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current allocation state.
        ///   vmSize: string, # Optional. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        ///   cloudServiceConfiguration: {
        ///     osFamily: string, # Required. Possible values are:
        /// 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1.
        /// 3 - OS Family 3, equivalent to Windows Server 2012.
        /// 4 - OS Family 4, equivalent to Windows Server 2012 R2.
        /// 5 - OS Family 5, equivalent to Windows Server 2016.
        /// 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        ///     osVersion: string, # Optional. The default value is * which specifies the latest operating system version for the specified OS family.
        ///   }, # Optional. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to &apos;UserSubscription&apos;.
        ///   virtualMachineConfiguration: {
        ///     imageReference: {
        ///       publisher: string, # Optional. For example, Canonical or MicrosoftWindowsServer.
        ///       offer: string, # Optional. For example, UbuntuServer or WindowsServer.
        ///       sku: string, # Optional. For example, 18.04-LTS or 2019-Datacenter.
        ///       version: string, # Optional. A value of &apos;latest&apos; can be specified to select the latest version of an Image. If omitted, the default is &apos;latest&apos;.
        ///       virtualMachineImageId: string, # Optional. This property is mutually exclusive with other ImageReference properties. The Shared Image Gallery Image must have replicas in the same region and must be in the same subscription as the Azure Batch account. If the image version is not specified in the imageId, the latest version will be used. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        ///       exactVersion: string, # Optional. The specific version of the platform image or marketplace image used to create the node. This read-only field differs from &apos;version&apos; only if the value specified for &apos;version&apos; when the pool was created was &apos;latest&apos;.
        ///     }, # Required. A reference to an Azure Virtual Machines Marketplace Image or a Shared Image Gallery Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the &apos;List Supported Images&apos; operation.
        ///     nodeAgentSKUId: string, # Required. The Batch Compute Node agent is a program that runs on each Compute Node in the Pool, and provides the command-and-control interface between the Compute Node and the Batch service. There are different implementations of the Compute Node agent, known as SKUs, for different operating systems. You must specify a Compute Node agent SKU which matches the selected Image reference. To get the list of supported Compute Node agent SKUs along with their list of verified Image references, see the &apos;List supported Compute Node agent SKUs&apos; operation.
        ///     windowsConfiguration: {
        ///       enableAutomaticUpdates: boolean, # Optional. If omitted, the default value is true.
        ///     }, # Optional. This property must not be specified if the imageReference property specifies a Linux OS Image.
        ///     dataDisks: [
        ///       {
        ///         lun: number, # Required. The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
        ///         caching: &quot;none&quot; | &quot;readonly&quot; | &quot;readwrite&quot;, # Optional. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        ///         diskSizeGB: number, # Required. The initial disk size in gigabytes.
        ///         storageAccountType: &quot;standard_lrs&quot; | &quot;premium_lrs&quot;, # Optional. If omitted, the default is &quot;standard_lrs&quot;.
        ///       }
        ///     ], # Optional. This property must be specified if the Compute Nodes in the Pool need to have empty data disks attached to them. This cannot be updated. Each Compute Node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the Compute Node is removed from the Pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
        ///     licenseType: string, # Optional. This only applies to Images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the Compute Nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        ///     containerConfiguration: {
        ///       type: string, # Required. The container technology to be used.
        ///       containerImageNames: [string], # Optional. This is the full Image reference, as would be specified to &quot;docker pull&quot;. An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
        ///       containerRegistries: [
        ///         {
        ///           username: string, # Optional. The user name to log into the registry server.
        ///           password: string, # Optional. The password to log into the registry server.
        ///           registryServer: string, # Optional. If omitted, the default is &quot;docker.io&quot;.
        ///           identityReference: {
        ///             resourceId: string, # Optional. The ARM resource id of the user assigned identity.
        ///           }, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///         }
        ///       ], # Optional. If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
        ///     }, # Optional. If specified, setup is performed on each Compute Node in the Pool to allow Tasks to run in containers. All regular Tasks and Job manager Tasks run on this Pool must specify the containerSettings property, and all other Tasks may specify it.
        ///     diskEncryptionConfiguration: {
        ///       targets: [&quot;osdisk&quot; | &quot;temporarydisk&quot;], # Optional. If omitted, no disks on the compute nodes in the pool will be encrypted. On Linux pool, only &quot;TemporaryDisk&quot; is supported; on Windows pool, &quot;OsDisk&quot; and &quot;TemporaryDisk&quot; must be specified.
        ///     }, # Optional. If specified, encryption is performed on each node in the pool during node provisioning.
        ///     nodePlacementConfiguration: {
        ///       policy: &quot;regional&quot; | &quot;zonal&quot;, # Optional. Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.
        ///     }, # Optional. This configuration will specify rules on how nodes in the pool will be physically allocated.
        ///     extensions: [
        ///       {
        ///         name: string, # Required. The name of the virtual machine extension.
        ///         publisher: string, # Required. The name of the extension handler publisher.
        ///         type: string, # Required. The type of the extension.
        ///         typeHandlerVersion: string, # Optional. The version of script handler.
        ///         autoUpgradeMinorVersion: boolean, # Optional. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        ///         settings: AnyObject, # Optional. JSON formatted public settings for the extension.
        ///         protectedSettings: AnyObject, # Optional. The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. 
        ///         provisionAfterExtensions: [string], # Optional. Collection of extension names after which this extension needs to be provisioned.
        ///       }
        ///     ], # Optional. If specified, the extensions mentioned in this configuration will be installed on each node.
        ///     osDisk: {
        ///       ephemeralOSDiskSettings: {
        ///         placement: string, # Optional. This property can be used by user in the request to choose the location e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.
        ///       }, # Optional. Specifies the ephemeral Disk Settings for the operating system disk used by the compute node (VM).
        ///     }, # Optional. Settings for the operating system disk of the compute node (VM).
        ///   }, # Optional. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
        ///   resizeErrors: [
        ///     {
        ///       code: string, # Optional. An identifier for the Pool resize error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the Pool resize error, intended to be suitable for display in a user interface.
        ///       values: [
        ///         {
        ///           name: string, # Optional. The name in the name-value pair.
        ///           value: string, # Optional. The value in the name-value pair.
        ///         }
        ///       ], # Optional. A list of additional error details related to the Pool resize error.
        ///     }
        ///   ], # Optional. This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady.
        ///   currentDedicatedNodes: number, # Optional. The number of dedicated Compute Nodes currently in the Pool.
        ///   currentLowPriorityNodes: number, # Optional. Spot/Low-priority Compute Nodes which have been preempted are included in this count.
        ///   targetDedicatedNodes: number, # Optional. The desired number of dedicated Compute Nodes in the Pool.
        ///   targetLowPriorityNodes: number, # Optional. The desired number of Spot/Low-priority Compute Nodes in the Pool.
        ///   enableAutoScale: boolean, # Optional. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.
        ///   autoScaleFormula: string, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleEvaluationInterval: string (duration ISO 8601 Format), # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleRun: {
        ///     timestamp: string (ISO 8601 Format), # Required. The time at which the autoscale formula was last evaluated.
        ///     results: string, # Optional. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        ///     error: {
        ///       code: string, # Optional. An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the autoscale error, intended to be suitable for display in a user interface.
        ///       values: [NameValuePair], # Optional. A list of additional error details related to the autoscale error.
        ///     }, # Optional. An error that occurred when executing or evaluating a Pool autoscale formula.
        ///   }, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   enableInterNodeCommunication: boolean, # Optional. This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool.
        ///   networkConfiguration: {
        ///     subnetId: string, # Optional. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn&apos;t have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The &apos;MicrosoftAzureBatch&apos; service principal must have the &apos;Classic Virtual Machine Contributor&apos; Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks (&apos;Microsoft.Network/virtualNetworks&apos;) are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        ///     dynamicVNetAssignmentScope: &quot;none&quot; | &quot;job&quot;, # Optional. The scope of dynamic vnet assignment.
        ///     endpointConfiguration: {
        ///       inboundNATPools: [
        ///         {
        ///           name: string, # Required. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
        ///           protocol: &quot;tcp&quot; | &quot;udp&quot;, # Required. The protocol of the endpoint.
        ///           backendPort: number, # Required. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeStart: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeEnd: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           networkSecurityGroupRules: [
        ///             {
        ///               priority: number, # Required. Priorities within a Pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
        ///               access: &quot;allow&quot; | &quot;deny&quot;, # Required. The action that should be taken for a specified IP address, subnet range or tag.
        ///               sourceAddressPrefix: string, # Required. Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
        ///               sourcePortRanges: [string], # Optional. Valid values are &apos;*&apos; (for all ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0 to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port). If any other values are provided the request fails with HTTP status code 400. The default value is &apos;*&apos;.
        ///             }
        ///           ], # Optional. The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
        ///         }
        ///       ], # Required. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        ///     }, # Optional. Pool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
        ///     publicIPAddressConfiguration: {
        ///       provision: &quot;batchmanaged&quot; | &quot;usermanaged&quot; | &quot;nopublicipaddresses&quot;, # Optional. The default value is BatchManaged.
        ///       ipAddressIds: [string], # Optional. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        ///     }, # Optional. Public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
        ///   }, # Optional. The network configuration for a Pool.
        ///   startTask: {
        ///     commandLine: string, # Required. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using &quot;cmd /c MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        ///     containerSettings: {
        ///       containerRunOptions: string, # Optional. These additional options are supplied as arguments to the &quot;docker create&quot; command, in addition to those controlled by the Batch Service.
        ///       imageName: string, # Required. This is the full Image reference, as would be specified to &quot;docker pull&quot;. If no tag is provided as part of the Image name, the tag &quot;:latest&quot; is used as a default.
        ///       registry: ContainerRegistry, # Optional. This setting can be omitted if was already provided at Pool creation.
        ///       workingDirectory: &quot;taskWorkingDirectory&quot; | &quot;containerImageDefault&quot;, # Optional. The default is &apos;taskWorkingDirectory&apos;.
        ///     }, # Optional. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
        ///         storageContainerUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access.
        ///         httpUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access.
        ///         blobPrefix: string, # Optional. The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        ///         filePath: string, # Optional. If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task&apos;s working directory (for example by using &apos;..&apos;).
        ///         fileMode: string, # Optional. This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }
        ///     ], # Optional. Files listed under this element are located in the Task&apos;s working directory.
        ///     environmentSettings: [
        ///       {
        ///         name: string, # Required. The name of the environment variable.
        ///         value: string, # Optional. The value of the environment variable.
        ///       }
        ///     ], # Optional. A list of environment variable settings for the StartTask.
        ///     userIdentity: {
        ///       username: string, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///       autoUser: {
        ///         scope: &quot;task&quot; | &quot;pool&quot;, # Optional. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.
        ///         elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       }, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///     }, # Optional. If omitted, the Task runs as a non-administrative user unique to the Task.
        ///     maxTaskRetryCount: number, # Optional. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)
        ///     waitForSuccess: boolean, # Optional. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        ///   }, # Optional. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
        ///   certificateReferences: [
        ///     {
        ///       thumbprint: string, # Required. The thumbprint of the Certificate.
        ///       thumbprintAlgorithm: string, # Required. The algorithm with which the thumbprint is associated. This must be sha1.
        ///       storeLocation: &quot;currentuser&quot; | &quot;localmachine&quot;, # Optional. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///       storeName: string, # Optional. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
        ///       visibility: [&quot;starttask&quot; | &quot;task&quot; | &quot;remoteuser&quot;], # Optional. You can specify more than one visibility in this collection. The default is all Accounts.
        ///     }
        ///   ], # Optional. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///   applicationPackageReferences: [
        ///     {
        ///       applicationId: string, # Required. The ID of the application to deploy.
        ///       version: string, # Optional. If this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error.
        ///     }
        ///   ], # Optional. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
        ///   applicationLicenses: [string], # Optional. The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.
        ///   taskSlotsPerNode: number, # Optional. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        ///   taskSchedulingPolicy: {
        ///     nodeFillType: &quot;spread&quot; | &quot;pack&quot;, # Required. If not specified, the default is spread.
        ///   }, # Optional. If not specified, the default is spread.
        ///   userAccounts: [
        ///     {
        ///       name: string, # Required. The name of the user Account.
        ///       password: string, # Required. The password for the user Account.
        ///       elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       linuxUserConfiguration: {
        ///         uid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
        ///         gid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
        ///         sshPrivateKey: string, # Optional. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool&apos;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&apos;s .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user&apos;s .ssh directory is done).
        ///       }, # Optional. This property is ignored if specified on a Windows Pool. If not specified, the user is created with the default options.
        ///       windowsUserConfiguration: {
        ///         loginMode: &quot;batch&quot; | &quot;interactive&quot;, # Optional. The default value for VirtualMachineConfiguration Pools is &apos;batch&apos; and for CloudServiceConfiguration Pools is &apos;interactive&apos;.
        ///       }, # Optional. This property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
        ///     }
        ///   ], # Optional. The list of user Accounts to be created on each Compute Node in the Pool.
        ///   metadata: [
        ///     {
        ///       name: string, # Required. The name of the metadata item.
        ///       value: string, # Required. The value of the metadata item.
        ///     }
        ///   ], # Optional. A list of name-value pairs associated with the Pool as metadata.
        ///   stats: {
        ///     url: string, # Required. The URL for the statistics.
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     usageStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       dedicatedCoreTime: string (duration ISO 8601 Format), # Required. The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        ///     }, # Optional. Statistics related to Pool usage information.
        ///     resourceStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       avgCPUPercentage: number, # Required. The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        ///       avgMemoryGiB: number, # Required. The average memory usage in GiB across all Compute Nodes in the Pool.
        ///       peakMemoryGiB: number, # Required. The peak memory usage in GiB across all Compute Nodes in the Pool.
        ///       avgDiskGiB: number, # Required. The average used disk space in GiB across all Compute Nodes in the Pool.
        ///       peakDiskGiB: number, # Required. The peak used disk space in GiB across all Compute Nodes in the Pool.
        ///       diskReadIOps: number, # Required. The total number of disk read operations across all Compute Nodes in the Pool.
        ///       diskWriteIOps: number, # Required. The total number of disk write operations across all Compute Nodes in the Pool.
        ///       diskReadGiB: number, # Required. The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        ///       diskWriteGiB: number, # Required. The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        ///       networkReadGiB: number, # Required. The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        ///       networkWriteGiB: number, # Required. The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        ///     }, # Optional. Statistics related to resource consumption by Compute Nodes in a Pool.
        ///   }, # Optional. This property is populated only if the CloudPool was retrieved with an expand clause including the &apos;stats&apos; attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        ///   mountConfiguration: [
        ///     {
        ///       azureBlobFileSystemConfiguration: {
        ///         accountName: string, # Required. The Azure Storage Account name.
        ///         containerName: string, # Required. The Azure Blob Storage Container name.
        ///         accountKey: string, # Optional. This property is mutually exclusive with both sasKey and identity; exactly one must be specified.
        ///         sasKey: string, # Optional. This property is mutually exclusive with both accountKey and identity; exactly one must be specified.
        ///         blobfuseOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. This property is mutually exclusive with both accountKey and sasKey; exactly one must be specified.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       nfsMountConfiguration: {
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       cifsMountConfiguration: {
        ///         username: string, # Required. The user to use for authentication against the CIFS file system.
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         password: string, # Required. The password to use for authentication against the CIFS file system.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       azureFileShareConfiguration: {
        ///         accountName: string, # Required. The Azure Storage account name.
        ///         azureFileUrl: string, # Required. This is of the form &apos;https://{account}.file.core.windows.net/&apos;.
        ///         accountKey: string, # Required. The Azure Storage account key.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///     }
        ///   ], # Optional. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        ///   identity: {
        ///     type: &quot;UserAssigned&quot; | &quot;None&quot;, # Required. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///     userAssignedIdentities: [
        ///       {
        ///         resourceId: string, # Required. The ARM resource id of the user assigned identity
        ///         clientId: string, # Optional. The client id of the user assigned identity.
        ///         principalId: string, # Optional. The principal id of the user assigned identity.
        ///       }
        ///     ], # Optional. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///   }, # Optional. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdatePropertiesAsync(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.UpdateProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdatePropertiesRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties of the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UpdateProperties with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateProperties("<poolId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call UpdateProperties with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     id = "<id>",
        ///     displayName = "<displayName>",
        ///     vmSize = "<vmSize>",
        ///     cloudServiceConfiguration = new {
        ///         osFamily = "<osFamily>",
        ///         osVersion = "<osVersion>",
        ///     },
        ///     virtualMachineConfiguration = new {
        ///         imageReference = new {
        ///             publisher = "<publisher>",
        ///             offer = "<offer>",
        ///             sku = "<sku>",
        ///             version = "<version>",
        ///             virtualMachineImageId = "<virtualMachineImageId>",
        ///         },
        ///         nodeAgentSKUId = "<nodeAgentSKUId>",
        ///         windowsConfiguration = new {
        ///             enableAutomaticUpdates = true,
        ///         },
        ///         dataDisks = new[] {
        ///             new {
        ///                 lun = 1234,
        ///                 caching = "none",
        ///                 diskSizeGB = 1234,
        ///                 storageAccountType = "standard_lrs",
        ///             }
        ///         },
        ///         licenseType = "<licenseType>",
        ///         containerConfiguration = new {
        ///             type = "<type>",
        ///             containerImageNames = new[] {
        ///                 "<String>"
        ///             },
        ///             containerRegistries = new[] {
        ///                 new {
        ///                     username = "<username>",
        ///                     password = "<password>",
        ///                     registryServer = "<registryServer>",
        ///                     identityReference = new {
        ///                         resourceId = "<resourceId>",
        ///                     },
        ///                 }
        ///             },
        ///         },
        ///         diskEncryptionConfiguration = new {
        ///             targets = new[] {
        ///                 "osdisk"
        ///             },
        ///         },
        ///         nodePlacementConfiguration = new {
        ///             policy = "regional",
        ///         },
        ///         extensions = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 publisher = "<publisher>",
        ///                 type = "<type>",
        ///                 typeHandlerVersion = "<typeHandlerVersion>",
        ///                 autoUpgradeMinorVersion = true,
        ///                 settings = new {},
        ///                 protectedSettings = new {},
        ///                 provisionAfterExtensions = new[] {
        ///                     "<String>"
        ///                 },
        ///             }
        ///         },
        ///         osDisk = new {
        ///             ephemeralOSDiskSettings = new {
        ///                 placement = "<placement>",
        ///             },
        ///         },
        ///     },
        ///     resizeTimeout = PT1H23M45S,
        ///     targetDedicatedNodes = 1234,
        ///     targetLowPriorityNodes = 1234,
        ///     enableAutoScale = true,
        ///     autoScaleFormula = "<autoScaleFormula>",
        ///     autoScaleEvaluationInterval = PT1H23M45S,
        ///     enableInterNodeCommunication = true,
        ///     networkConfiguration = new {
        ///         subnetId = "<subnetId>",
        ///         dynamicVNetAssignmentScope = "none",
        ///         endpointConfiguration = new {
        ///             inboundNATPools = new[] {
        ///                 new {
        ///                     name = "<name>",
        ///                     protocol = "tcp",
        ///                     backendPort = 1234,
        ///                     frontendPortRangeStart = 1234,
        ///                     frontendPortRangeEnd = 1234,
        ///                     networkSecurityGroupRules = new[] {
        ///                         new {
        ///                             priority = 1234,
        ///                             access = "allow",
        ///                             sourceAddressPrefix = "<sourceAddressPrefix>",
        ///                             sourcePortRanges = new[] {
        ///                                 "<String>"
        ///                             },
        ///                         }
        ///                     },
        ///                 }
        ///             },
        ///         },
        ///         publicIPAddressConfiguration = new {
        ///             provision = "batchmanaged",
        ///             ipAddressIds = new[] {
        ///                 "<String>"
        ///             },
        ///         },
        ///     },
        ///     startTask = new {
        ///         commandLine = "<commandLine>",
        ///         containerSettings = new {
        ///             containerRunOptions = "<containerRunOptions>",
        ///             imageName = "<imageName>",
        ///             registry = new {
        ///                 username = "<username>",
        ///                 password = "<password>",
        ///                 registryServer = "<registryServer>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             },
        ///             workingDirectory = "taskWorkingDirectory",
        ///         },
        ///         resourceFiles = new[] {
        ///             new {
        ///                 autoStorageContainerName = "<autoStorageContainerName>",
        ///                 storageContainerUrl = "<storageContainerUrl>",
        ///                 httpUrl = "<httpUrl>",
        ///                 blobPrefix = "<blobPrefix>",
        ///                 filePath = "<filePath>",
        ///                 fileMode = "<fileMode>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             }
        ///         },
        ///         environmentSettings = new[] {
        ///             new {
        ///                 name = "<name>",
        ///                 value = "<value>",
        ///             }
        ///         },
        ///         userIdentity = new {
        ///             username = "<username>",
        ///             autoUser = new {
        ///                 scope = "task",
        ///                 elevationLevel = "nonadmin",
        ///             },
        ///         },
        ///         maxTaskRetryCount = 1234,
        ///         waitForSuccess = true,
        ///     },
        ///     certificateReferences = new[] {
        ///         new {
        ///             thumbprint = "<thumbprint>",
        ///             thumbprintAlgorithm = "<thumbprintAlgorithm>",
        ///             storeLocation = "currentuser",
        ///             storeName = "<storeName>",
        ///             visibility = new[] {
        ///                 "starttask"
        ///             },
        ///         }
        ///     },
        ///     applicationPackageReferences = new[] {
        ///         new {
        ///             applicationId = "<applicationId>",
        ///             version = "<version>",
        ///         }
        ///     },
        ///     applicationLicenses = new[] {
        ///         "<String>"
        ///     },
        ///     taskSlotsPerNode = 1234,
        ///     taskSchedulingPolicy = new {
        ///         nodeFillType = "spread",
        ///     },
        ///     userAccounts = new[] {
        ///         new {
        ///             name = "<name>",
        ///             password = "<password>",
        ///             elevationLevel = "nonadmin",
        ///             linuxUserConfiguration = new {
        ///                 uid = 1234,
        ///                 gid = 1234,
        ///                 sshPrivateKey = "<sshPrivateKey>",
        ///             },
        ///             windowsUserConfiguration = new {
        ///                 loginMode = "batch",
        ///             },
        ///         }
        ///     },
        ///     metadata = new[] {
        ///         new {
        ///             name = "<name>",
        ///             value = "<value>",
        ///         }
        ///     },
        ///     mountConfiguration = new[] {
        ///         new {
        ///             azureBlobFileSystemConfiguration = new {
        ///                 accountName = "<accountName>",
        ///                 containerName = "<containerName>",
        ///                 accountKey = "<accountKey>",
        ///                 sasKey = "<sasKey>",
        ///                 blobfuseOptions = "<blobfuseOptions>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 identityReference = new {
        ///                     resourceId = "<resourceId>",
        ///                 },
        ///             },
        ///             nfsMountConfiguration = new {
        ///                 source = "<source>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///             },
        ///             cifsMountConfiguration = new {
        ///                 username = "<username>",
        ///                 source = "<source>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///                 password = "<password>",
        ///             },
        ///             azureFileShareConfiguration = new {
        ///                 accountName = "<accountName>",
        ///                 azureFileUrl = "<azureFileUrl>",
        ///                 accountKey = "<accountKey>",
        ///                 relativeMountPath = "<relativeMountPath>",
        ///                 mountOptions = "<mountOptions>",
        ///             },
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.UpdateProperties("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// This fully replaces all the updatable properties of the Pool. For example, if the Pool has a StartTask associated with it and if StartTask is not specified with this request, then the Batch service will remove the existing StartTask.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Pool</c>:
        /// <code>{
        ///   id: string, # Optional. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
        ///   displayName: string, # Optional. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        ///   url: string, # Optional. The URL of the Pool.
        ///   eTag: string, # Optional. This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime.
        ///   lastModified: string (ISO 8601 Format), # Optional. This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
        ///   creationTime: string (ISO 8601 Format), # Optional. The creation time of the Pool.
        ///   state: &quot;active&quot; | &quot;deleting&quot;, # Optional. The current state of the Pool.
        ///   stateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current state.
        ///   allocationState: &quot;steady&quot; | &quot;resizing&quot; | &quot;stopping&quot;, # Optional. Whether the Pool is resizing.
        ///   allocationStateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current allocation state.
        ///   vmSize: string, # Optional. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        ///   cloudServiceConfiguration: {
        ///     osFamily: string, # Required. Possible values are:
        /// 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1.
        /// 3 - OS Family 3, equivalent to Windows Server 2012.
        /// 4 - OS Family 4, equivalent to Windows Server 2012 R2.
        /// 5 - OS Family 5, equivalent to Windows Server 2016.
        /// 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        ///     osVersion: string, # Optional. The default value is * which specifies the latest operating system version for the specified OS family.
        ///   }, # Optional. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to &apos;UserSubscription&apos;.
        ///   virtualMachineConfiguration: {
        ///     imageReference: {
        ///       publisher: string, # Optional. For example, Canonical or MicrosoftWindowsServer.
        ///       offer: string, # Optional. For example, UbuntuServer or WindowsServer.
        ///       sku: string, # Optional. For example, 18.04-LTS or 2019-Datacenter.
        ///       version: string, # Optional. A value of &apos;latest&apos; can be specified to select the latest version of an Image. If omitted, the default is &apos;latest&apos;.
        ///       virtualMachineImageId: string, # Optional. This property is mutually exclusive with other ImageReference properties. The Shared Image Gallery Image must have replicas in the same region and must be in the same subscription as the Azure Batch account. If the image version is not specified in the imageId, the latest version will be used. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        ///       exactVersion: string, # Optional. The specific version of the platform image or marketplace image used to create the node. This read-only field differs from &apos;version&apos; only if the value specified for &apos;version&apos; when the pool was created was &apos;latest&apos;.
        ///     }, # Required. A reference to an Azure Virtual Machines Marketplace Image or a Shared Image Gallery Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the &apos;List Supported Images&apos; operation.
        ///     nodeAgentSKUId: string, # Required. The Batch Compute Node agent is a program that runs on each Compute Node in the Pool, and provides the command-and-control interface between the Compute Node and the Batch service. There are different implementations of the Compute Node agent, known as SKUs, for different operating systems. You must specify a Compute Node agent SKU which matches the selected Image reference. To get the list of supported Compute Node agent SKUs along with their list of verified Image references, see the &apos;List supported Compute Node agent SKUs&apos; operation.
        ///     windowsConfiguration: {
        ///       enableAutomaticUpdates: boolean, # Optional. If omitted, the default value is true.
        ///     }, # Optional. This property must not be specified if the imageReference property specifies a Linux OS Image.
        ///     dataDisks: [
        ///       {
        ///         lun: number, # Required. The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
        ///         caching: &quot;none&quot; | &quot;readonly&quot; | &quot;readwrite&quot;, # Optional. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        ///         diskSizeGB: number, # Required. The initial disk size in gigabytes.
        ///         storageAccountType: &quot;standard_lrs&quot; | &quot;premium_lrs&quot;, # Optional. If omitted, the default is &quot;standard_lrs&quot;.
        ///       }
        ///     ], # Optional. This property must be specified if the Compute Nodes in the Pool need to have empty data disks attached to them. This cannot be updated. Each Compute Node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the Compute Node is removed from the Pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
        ///     licenseType: string, # Optional. This only applies to Images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the Compute Nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        ///     containerConfiguration: {
        ///       type: string, # Required. The container technology to be used.
        ///       containerImageNames: [string], # Optional. This is the full Image reference, as would be specified to &quot;docker pull&quot;. An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
        ///       containerRegistries: [
        ///         {
        ///           username: string, # Optional. The user name to log into the registry server.
        ///           password: string, # Optional. The password to log into the registry server.
        ///           registryServer: string, # Optional. If omitted, the default is &quot;docker.io&quot;.
        ///           identityReference: {
        ///             resourceId: string, # Optional. The ARM resource id of the user assigned identity.
        ///           }, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///         }
        ///       ], # Optional. If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
        ///     }, # Optional. If specified, setup is performed on each Compute Node in the Pool to allow Tasks to run in containers. All regular Tasks and Job manager Tasks run on this Pool must specify the containerSettings property, and all other Tasks may specify it.
        ///     diskEncryptionConfiguration: {
        ///       targets: [&quot;osdisk&quot; | &quot;temporarydisk&quot;], # Optional. If omitted, no disks on the compute nodes in the pool will be encrypted. On Linux pool, only &quot;TemporaryDisk&quot; is supported; on Windows pool, &quot;OsDisk&quot; and &quot;TemporaryDisk&quot; must be specified.
        ///     }, # Optional. If specified, encryption is performed on each node in the pool during node provisioning.
        ///     nodePlacementConfiguration: {
        ///       policy: &quot;regional&quot; | &quot;zonal&quot;, # Optional. Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.
        ///     }, # Optional. This configuration will specify rules on how nodes in the pool will be physically allocated.
        ///     extensions: [
        ///       {
        ///         name: string, # Required. The name of the virtual machine extension.
        ///         publisher: string, # Required. The name of the extension handler publisher.
        ///         type: string, # Required. The type of the extension.
        ///         typeHandlerVersion: string, # Optional. The version of script handler.
        ///         autoUpgradeMinorVersion: boolean, # Optional. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        ///         settings: AnyObject, # Optional. JSON formatted public settings for the extension.
        ///         protectedSettings: AnyObject, # Optional. The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. 
        ///         provisionAfterExtensions: [string], # Optional. Collection of extension names after which this extension needs to be provisioned.
        ///       }
        ///     ], # Optional. If specified, the extensions mentioned in this configuration will be installed on each node.
        ///     osDisk: {
        ///       ephemeralOSDiskSettings: {
        ///         placement: string, # Optional. This property can be used by user in the request to choose the location e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.
        ///       }, # Optional. Specifies the ephemeral Disk Settings for the operating system disk used by the compute node (VM).
        ///     }, # Optional. Settings for the operating system disk of the compute node (VM).
        ///   }, # Optional. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
        ///   resizeErrors: [
        ///     {
        ///       code: string, # Optional. An identifier for the Pool resize error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the Pool resize error, intended to be suitable for display in a user interface.
        ///       values: [
        ///         {
        ///           name: string, # Optional. The name in the name-value pair.
        ///           value: string, # Optional. The value in the name-value pair.
        ///         }
        ///       ], # Optional. A list of additional error details related to the Pool resize error.
        ///     }
        ///   ], # Optional. This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady.
        ///   currentDedicatedNodes: number, # Optional. The number of dedicated Compute Nodes currently in the Pool.
        ///   currentLowPriorityNodes: number, # Optional. Spot/Low-priority Compute Nodes which have been preempted are included in this count.
        ///   targetDedicatedNodes: number, # Optional. The desired number of dedicated Compute Nodes in the Pool.
        ///   targetLowPriorityNodes: number, # Optional. The desired number of Spot/Low-priority Compute Nodes in the Pool.
        ///   enableAutoScale: boolean, # Optional. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.
        ///   autoScaleFormula: string, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleEvaluationInterval: string (duration ISO 8601 Format), # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleRun: {
        ///     timestamp: string (ISO 8601 Format), # Required. The time at which the autoscale formula was last evaluated.
        ///     results: string, # Optional. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        ///     error: {
        ///       code: string, # Optional. An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the autoscale error, intended to be suitable for display in a user interface.
        ///       values: [NameValuePair], # Optional. A list of additional error details related to the autoscale error.
        ///     }, # Optional. An error that occurred when executing or evaluating a Pool autoscale formula.
        ///   }, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   enableInterNodeCommunication: boolean, # Optional. This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool.
        ///   networkConfiguration: {
        ///     subnetId: string, # Optional. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn&apos;t have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The &apos;MicrosoftAzureBatch&apos; service principal must have the &apos;Classic Virtual Machine Contributor&apos; Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks (&apos;Microsoft.Network/virtualNetworks&apos;) are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        ///     dynamicVNetAssignmentScope: &quot;none&quot; | &quot;job&quot;, # Optional. The scope of dynamic vnet assignment.
        ///     endpointConfiguration: {
        ///       inboundNATPools: [
        ///         {
        ///           name: string, # Required. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
        ///           protocol: &quot;tcp&quot; | &quot;udp&quot;, # Required. The protocol of the endpoint.
        ///           backendPort: number, # Required. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeStart: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeEnd: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           networkSecurityGroupRules: [
        ///             {
        ///               priority: number, # Required. Priorities within a Pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
        ///               access: &quot;allow&quot; | &quot;deny&quot;, # Required. The action that should be taken for a specified IP address, subnet range or tag.
        ///               sourceAddressPrefix: string, # Required. Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
        ///               sourcePortRanges: [string], # Optional. Valid values are &apos;*&apos; (for all ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0 to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port). If any other values are provided the request fails with HTTP status code 400. The default value is &apos;*&apos;.
        ///             }
        ///           ], # Optional. The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
        ///         }
        ///       ], # Required. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        ///     }, # Optional. Pool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
        ///     publicIPAddressConfiguration: {
        ///       provision: &quot;batchmanaged&quot; | &quot;usermanaged&quot; | &quot;nopublicipaddresses&quot;, # Optional. The default value is BatchManaged.
        ///       ipAddressIds: [string], # Optional. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        ///     }, # Optional. Public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
        ///   }, # Optional. The network configuration for a Pool.
        ///   startTask: {
        ///     commandLine: string, # Required. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using &quot;cmd /c MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        ///     containerSettings: {
        ///       containerRunOptions: string, # Optional. These additional options are supplied as arguments to the &quot;docker create&quot; command, in addition to those controlled by the Batch Service.
        ///       imageName: string, # Required. This is the full Image reference, as would be specified to &quot;docker pull&quot;. If no tag is provided as part of the Image name, the tag &quot;:latest&quot; is used as a default.
        ///       registry: ContainerRegistry, # Optional. This setting can be omitted if was already provided at Pool creation.
        ///       workingDirectory: &quot;taskWorkingDirectory&quot; | &quot;containerImageDefault&quot;, # Optional. The default is &apos;taskWorkingDirectory&apos;.
        ///     }, # Optional. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
        ///         storageContainerUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access.
        ///         httpUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access.
        ///         blobPrefix: string, # Optional. The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        ///         filePath: string, # Optional. If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task&apos;s working directory (for example by using &apos;..&apos;).
        ///         fileMode: string, # Optional. This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }
        ///     ], # Optional. Files listed under this element are located in the Task&apos;s working directory.
        ///     environmentSettings: [
        ///       {
        ///         name: string, # Required. The name of the environment variable.
        ///         value: string, # Optional. The value of the environment variable.
        ///       }
        ///     ], # Optional. A list of environment variable settings for the StartTask.
        ///     userIdentity: {
        ///       username: string, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///       autoUser: {
        ///         scope: &quot;task&quot; | &quot;pool&quot;, # Optional. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.
        ///         elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       }, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///     }, # Optional. If omitted, the Task runs as a non-administrative user unique to the Task.
        ///     maxTaskRetryCount: number, # Optional. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)
        ///     waitForSuccess: boolean, # Optional. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        ///   }, # Optional. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
        ///   certificateReferences: [
        ///     {
        ///       thumbprint: string, # Required. The thumbprint of the Certificate.
        ///       thumbprintAlgorithm: string, # Required. The algorithm with which the thumbprint is associated. This must be sha1.
        ///       storeLocation: &quot;currentuser&quot; | &quot;localmachine&quot;, # Optional. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///       storeName: string, # Optional. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
        ///       visibility: [&quot;starttask&quot; | &quot;task&quot; | &quot;remoteuser&quot;], # Optional. You can specify more than one visibility in this collection. The default is all Accounts.
        ///     }
        ///   ], # Optional. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///   applicationPackageReferences: [
        ///     {
        ///       applicationId: string, # Required. The ID of the application to deploy.
        ///       version: string, # Optional. If this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error.
        ///     }
        ///   ], # Optional. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
        ///   applicationLicenses: [string], # Optional. The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.
        ///   taskSlotsPerNode: number, # Optional. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        ///   taskSchedulingPolicy: {
        ///     nodeFillType: &quot;spread&quot; | &quot;pack&quot;, # Required. If not specified, the default is spread.
        ///   }, # Optional. If not specified, the default is spread.
        ///   userAccounts: [
        ///     {
        ///       name: string, # Required. The name of the user Account.
        ///       password: string, # Required. The password for the user Account.
        ///       elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       linuxUserConfiguration: {
        ///         uid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
        ///         gid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
        ///         sshPrivateKey: string, # Optional. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool&apos;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&apos;s .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user&apos;s .ssh directory is done).
        ///       }, # Optional. This property is ignored if specified on a Windows Pool. If not specified, the user is created with the default options.
        ///       windowsUserConfiguration: {
        ///         loginMode: &quot;batch&quot; | &quot;interactive&quot;, # Optional. The default value for VirtualMachineConfiguration Pools is &apos;batch&apos; and for CloudServiceConfiguration Pools is &apos;interactive&apos;.
        ///       }, # Optional. This property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
        ///     }
        ///   ], # Optional. The list of user Accounts to be created on each Compute Node in the Pool.
        ///   metadata: [
        ///     {
        ///       name: string, # Required. The name of the metadata item.
        ///       value: string, # Required. The value of the metadata item.
        ///     }
        ///   ], # Optional. A list of name-value pairs associated with the Pool as metadata.
        ///   stats: {
        ///     url: string, # Required. The URL for the statistics.
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     usageStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       dedicatedCoreTime: string (duration ISO 8601 Format), # Required. The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        ///     }, # Optional. Statistics related to Pool usage information.
        ///     resourceStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       avgCPUPercentage: number, # Required. The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        ///       avgMemoryGiB: number, # Required. The average memory usage in GiB across all Compute Nodes in the Pool.
        ///       peakMemoryGiB: number, # Required. The peak memory usage in GiB across all Compute Nodes in the Pool.
        ///       avgDiskGiB: number, # Required. The average used disk space in GiB across all Compute Nodes in the Pool.
        ///       peakDiskGiB: number, # Required. The peak used disk space in GiB across all Compute Nodes in the Pool.
        ///       diskReadIOps: number, # Required. The total number of disk read operations across all Compute Nodes in the Pool.
        ///       diskWriteIOps: number, # Required. The total number of disk write operations across all Compute Nodes in the Pool.
        ///       diskReadGiB: number, # Required. The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        ///       diskWriteGiB: number, # Required. The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        ///       networkReadGiB: number, # Required. The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        ///       networkWriteGiB: number, # Required. The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        ///     }, # Optional. Statistics related to resource consumption by Compute Nodes in a Pool.
        ///   }, # Optional. This property is populated only if the CloudPool was retrieved with an expand clause including the &apos;stats&apos; attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        ///   mountConfiguration: [
        ///     {
        ///       azureBlobFileSystemConfiguration: {
        ///         accountName: string, # Required. The Azure Storage Account name.
        ///         containerName: string, # Required. The Azure Blob Storage Container name.
        ///         accountKey: string, # Optional. This property is mutually exclusive with both sasKey and identity; exactly one must be specified.
        ///         sasKey: string, # Optional. This property is mutually exclusive with both accountKey and identity; exactly one must be specified.
        ///         blobfuseOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. This property is mutually exclusive with both accountKey and sasKey; exactly one must be specified.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       nfsMountConfiguration: {
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       cifsMountConfiguration: {
        ///         username: string, # Required. The user to use for authentication against the CIFS file system.
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         password: string, # Required. The password to use for authentication against the CIFS file system.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       azureFileShareConfiguration: {
        ///         accountName: string, # Required. The Azure Storage account name.
        ///         azureFileUrl: string, # Required. This is of the form &apos;https://{account}.file.core.windows.net/&apos;.
        ///         accountKey: string, # Required. The Azure Storage account key.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///     }
        ///   ], # Optional. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        ///   identity: {
        ///     type: &quot;UserAssigned&quot; | &quot;None&quot;, # Required. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///     userAssignedIdentities: [
        ///       {
        ///         resourceId: string, # Required. The ARM resource id of the user assigned identity
        ///         clientId: string, # Optional. The client id of the user assigned identity.
        ///         principalId: string, # Optional. The principal id of the user assigned identity.
        ///       }
        ///     ], # Optional. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///   }, # Optional. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateProperties(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.UpdateProperties");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdatePropertiesRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes Compute Nodes from the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool from which you want to remove Compute Nodes. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call RemoveNodesAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     nodeList = new[] {
        ///         "<String>"
        ///     },
        /// };
        /// 
        /// Response response = await client.RemoveNodesAsync("<poolId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call RemoveNodesAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     nodeList = new[] {
        ///         "<String>"
        ///     },
        ///     resizeTimeout = PT1H23M45S,
        ///     nodeDeallocationOption = "requeue",
        /// };
        /// 
        /// Response response = await client.RemoveNodesAsync("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// This operation can only run when the allocation state of the Pool is steady. When this operation runs, the allocation state changes from steady to resizing. Each request may remove up to 100 nodes.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>NodeRemoveParameter</c>:
        /// <code>{
        ///   nodeList: [string], # Required. A maximum of 100 nodes may be removed per request.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
        ///   nodeDeallocationOption: &quot;requeue&quot; | &quot;terminate&quot; | &quot;taskcompletion&quot; | &quot;retaineddata&quot;, # Optional. The default value is requeue.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RemoveNodesAsync(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.RemoveNodes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRemoveNodesRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes Compute Nodes from the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool from which you want to remove Compute Nodes. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call RemoveNodes with required parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     nodeList = new[] {
        ///         "<String>"
        ///     },
        /// };
        /// 
        /// Response response = client.RemoveNodes("<poolId>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call RemoveNodes with all parameters and request content.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// var data = new {
        ///     nodeList = new[] {
        ///         "<String>"
        ///     },
        ///     resizeTimeout = PT1H23M45S,
        ///     nodeDeallocationOption = "requeue",
        /// };
        /// 
        /// Response response = client.RemoveNodes("<poolId>", RequestContent.Create(data), 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow, null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// This operation can only run when the allocation state of the Pool is steady. When this operation runs, the allocation state changes from steady to resizing. Each request may remove up to 100 nodes.
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>NodeRemoveParameter</c>:
        /// <code>{
        ///   nodeList: [string], # Required. A maximum of 100 nodes may be removed per request.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
        ///   nodeDeallocationOption: &quot;requeue&quot; | &quot;terminate&quot; | &quot;taskcompletion&quot; | &quot;retaineddata&quot;, # Optional. The default value is requeue.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response RemoveNodes(string poolId, RequestContent content, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestConditions requestConditions = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PoolClient.RemoveNodes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRemoveNodesRequest(poolId, content, timeout, clientRequestId, returnClientRequestId, ocpDate, requestConditions, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account. </summary>
        /// <param name="startTime"> The earliest time from which to include metrics. This must be at least two and a half hours before the current time. If not specified this defaults to the start time of the last aggregation interval currently available. </param>
        /// <param name="endTime"> The latest time from which to include metrics. This must be at least two hours before the current time. If not specified this defaults to the end time of the last aggregation interval currently available. </param>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 results will be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetUsageMetricsAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// await foreach (var data in client.GetUsageMetricsAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("poolId").ToString());
        ///     Console.WriteLine(result.GetProperty("startTime").ToString());
        ///     Console.WriteLine(result.GetProperty("endTime").ToString());
        ///     Console.WriteLine(result.GetProperty("vmSize").ToString());
        ///     Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetUsageMetricsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// await foreach (var data in client.GetUsageMetricsAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<filter>", 1234, 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("poolId").ToString());
        ///     Console.WriteLine(result.GetProperty("startTime").ToString());
        ///     Console.WriteLine(result.GetProperty("endTime").ToString());
        ///     Console.WriteLine(result.GetProperty("vmSize").ToString());
        ///     Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// If you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.
        /// 
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PoolListUsageMetricsResultValue</c>:
        /// <code>{
        ///   poolId: string, # Required. The ID of the Pool whose metrics are aggregated in this entry.
        ///   startTime: string (ISO 8601 Format), # Required. The start time of the aggregation interval covered by this entry.
        ///   endTime: string (ISO 8601 Format), # Required. The end time of the aggregation interval covered by this entry.
        ///   vmSize: string, # Required. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        ///   totalCoreHours: number, # Required. The total core hours used in the Pool during this aggregation interval.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetUsageMetricsAsync(DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string filter = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            return GetUsageMetricsImplementationAsync("PoolClient.GetUsageMetrics", startTime, endTime, filter, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
        }

        private AsyncPageable<BinaryData> GetUsageMetricsImplementationAsync(string diagnosticsScopeName, DateTimeOffset? startTime, DateTimeOffset? endTime, string filter, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetUsageMetricsRequest(startTime, endTime, filter, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetUsageMetricsNextPageRequest(nextLink, startTime, endTime, filter, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "odata.nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account. </summary>
        /// <param name="startTime"> The earliest time from which to include metrics. This must be at least two and a half hours before the current time. If not specified this defaults to the start time of the last aggregation interval currently available. </param>
        /// <param name="endTime"> The latest time from which to include metrics. This must be at least two hours before the current time. If not specified this defaults to the end time of the last aggregation interval currently available. </param>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 results will be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetUsageMetrics and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// foreach (var data in client.GetUsageMetrics())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("poolId").ToString());
        ///     Console.WriteLine(result.GetProperty("startTime").ToString());
        ///     Console.WriteLine(result.GetProperty("endTime").ToString());
        ///     Console.WriteLine(result.GetProperty("vmSize").ToString());
        ///     Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetUsageMetrics with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// foreach (var data in client.GetUsageMetrics(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<filter>", 1234, 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("poolId").ToString());
        ///     Console.WriteLine(result.GetProperty("startTime").ToString());
        ///     Console.WriteLine(result.GetProperty("endTime").ToString());
        ///     Console.WriteLine(result.GetProperty("vmSize").ToString());
        ///     Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// If you do not specify a $filter clause including a poolId, the response includes all Pools that existed in the Account in the time range of the returned aggregation intervals. If you do not specify a $filter clause including a startTime or endTime these filters default to the start and end times of the last aggregation interval currently available; that is, only the last aggregation interval is returned.
        /// 
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PoolListUsageMetricsResultValue</c>:
        /// <code>{
        ///   poolId: string, # Required. The ID of the Pool whose metrics are aggregated in this entry.
        ///   startTime: string (ISO 8601 Format), # Required. The start time of the aggregation interval covered by this entry.
        ///   endTime: string (ISO 8601 Format), # Required. The end time of the aggregation interval covered by this entry.
        ///   vmSize: string, # Required. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        ///   totalCoreHours: number, # Required. The total core hours used in the Pool during this aggregation interval.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetUsageMetrics(DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string filter = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            return GetUsageMetricsImplementation("PoolClient.GetUsageMetrics", startTime, endTime, filter, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
        }

        private Pageable<BinaryData> GetUsageMetricsImplementation(string diagnosticsScopeName, DateTimeOffset? startTime, DateTimeOffset? endTime, string filter, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetUsageMetricsRequest(startTime, endTime, filter, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetUsageMetricsNextPageRequest(nextLink, startTime, endTime, filter, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "odata.nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists all of the Pools in the specified Account. </summary>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 Pools can be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPoolsAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// await foreach (var data in client.GetPoolsAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetPoolsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// await foreach (var data in client.GetPoolsAsync("<filter>", "<select>", "<expand>", 1234, 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("displayName").ToString());
        ///     Console.WriteLine(result.GetProperty("url").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("lastModified").ToString());
        ///     Console.WriteLine(result.GetProperty("creationTime").ToString());
        ///     Console.WriteLine(result.GetProperty("state").ToString());
        ///     Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
        ///     Console.WriteLine(result.GetProperty("allocationState").ToString());
        ///     Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
        ///     Console.WriteLine(result.GetProperty("vmSize").ToString());
        ///     Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osFamily").ToString());
        ///     Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
        ///     Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
        ///     Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
        ///     Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
        ///     Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
        ///     Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
        ///     Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
        ///     Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
        ///     Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
        ///     Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprint").ToString());
        ///     Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprintAlgorithm").ToString());
        ///     Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeLocation").ToString());
        ///     Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeName").ToString());
        ///     Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("visibility")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
        ///     Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
        ///     Console.WriteLine(result.GetProperty("applicationLicenses")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
        ///     Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
        ///     Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
        ///     Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
        ///     Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
        ///     Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PoolListResultValue</c>:
        /// <code>{
        ///   id: string, # Optional. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
        ///   displayName: string, # Optional. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        ///   url: string, # Optional. The URL of the Pool.
        ///   eTag: string, # Optional. This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime.
        ///   lastModified: string (ISO 8601 Format), # Optional. This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
        ///   creationTime: string (ISO 8601 Format), # Optional. The creation time of the Pool.
        ///   state: &quot;active&quot; | &quot;deleting&quot;, # Optional. The current state of the Pool.
        ///   stateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current state.
        ///   allocationState: &quot;steady&quot; | &quot;resizing&quot; | &quot;stopping&quot;, # Optional. Whether the Pool is resizing.
        ///   allocationStateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current allocation state.
        ///   vmSize: string, # Optional. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        ///   cloudServiceConfiguration: {
        ///     osFamily: string, # Required. Possible values are:
        /// 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1.
        /// 3 - OS Family 3, equivalent to Windows Server 2012.
        /// 4 - OS Family 4, equivalent to Windows Server 2012 R2.
        /// 5 - OS Family 5, equivalent to Windows Server 2016.
        /// 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        ///     osVersion: string, # Optional. The default value is * which specifies the latest operating system version for the specified OS family.
        ///   }, # Optional. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to &apos;UserSubscription&apos;.
        ///   virtualMachineConfiguration: {
        ///     imageReference: {
        ///       publisher: string, # Optional. For example, Canonical or MicrosoftWindowsServer.
        ///       offer: string, # Optional. For example, UbuntuServer or WindowsServer.
        ///       sku: string, # Optional. For example, 18.04-LTS or 2019-Datacenter.
        ///       version: string, # Optional. A value of &apos;latest&apos; can be specified to select the latest version of an Image. If omitted, the default is &apos;latest&apos;.
        ///       virtualMachineImageId: string, # Optional. This property is mutually exclusive with other ImageReference properties. The Shared Image Gallery Image must have replicas in the same region and must be in the same subscription as the Azure Batch account. If the image version is not specified in the imageId, the latest version will be used. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        ///       exactVersion: string, # Optional. The specific version of the platform image or marketplace image used to create the node. This read-only field differs from &apos;version&apos; only if the value specified for &apos;version&apos; when the pool was created was &apos;latest&apos;.
        ///     }, # Required. A reference to an Azure Virtual Machines Marketplace Image or a Shared Image Gallery Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the &apos;List Supported Images&apos; operation.
        ///     nodeAgentSKUId: string, # Required. The Batch Compute Node agent is a program that runs on each Compute Node in the Pool, and provides the command-and-control interface between the Compute Node and the Batch service. There are different implementations of the Compute Node agent, known as SKUs, for different operating systems. You must specify a Compute Node agent SKU which matches the selected Image reference. To get the list of supported Compute Node agent SKUs along with their list of verified Image references, see the &apos;List supported Compute Node agent SKUs&apos; operation.
        ///     windowsConfiguration: {
        ///       enableAutomaticUpdates: boolean, # Optional. If omitted, the default value is true.
        ///     }, # Optional. This property must not be specified if the imageReference property specifies a Linux OS Image.
        ///     dataDisks: [
        ///       {
        ///         lun: number, # Required. The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
        ///         caching: &quot;none&quot; | &quot;readonly&quot; | &quot;readwrite&quot;, # Optional. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        ///         diskSizeGB: number, # Required. The initial disk size in gigabytes.
        ///         storageAccountType: &quot;standard_lrs&quot; | &quot;premium_lrs&quot;, # Optional. If omitted, the default is &quot;standard_lrs&quot;.
        ///       }
        ///     ], # Optional. This property must be specified if the Compute Nodes in the Pool need to have empty data disks attached to them. This cannot be updated. Each Compute Node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the Compute Node is removed from the Pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
        ///     licenseType: string, # Optional. This only applies to Images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the Compute Nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        ///     containerConfiguration: {
        ///       type: string, # Required. The container technology to be used.
        ///       containerImageNames: [string], # Optional. This is the full Image reference, as would be specified to &quot;docker pull&quot;. An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
        ///       containerRegistries: [
        ///         {
        ///           username: string, # Optional. The user name to log into the registry server.
        ///           password: string, # Optional. The password to log into the registry server.
        ///           registryServer: string, # Optional. If omitted, the default is &quot;docker.io&quot;.
        ///           identityReference: {
        ///             resourceId: string, # Optional. The ARM resource id of the user assigned identity.
        ///           }, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///         }
        ///       ], # Optional. If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
        ///     }, # Optional. If specified, setup is performed on each Compute Node in the Pool to allow Tasks to run in containers. All regular Tasks and Job manager Tasks run on this Pool must specify the containerSettings property, and all other Tasks may specify it.
        ///     diskEncryptionConfiguration: {
        ///       targets: [&quot;osdisk&quot; | &quot;temporarydisk&quot;], # Optional. If omitted, no disks on the compute nodes in the pool will be encrypted. On Linux pool, only &quot;TemporaryDisk&quot; is supported; on Windows pool, &quot;OsDisk&quot; and &quot;TemporaryDisk&quot; must be specified.
        ///     }, # Optional. If specified, encryption is performed on each node in the pool during node provisioning.
        ///     nodePlacementConfiguration: {
        ///       policy: &quot;regional&quot; | &quot;zonal&quot;, # Optional. Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.
        ///     }, # Optional. This configuration will specify rules on how nodes in the pool will be physically allocated.
        ///     extensions: [
        ///       {
        ///         name: string, # Required. The name of the virtual machine extension.
        ///         publisher: string, # Required. The name of the extension handler publisher.
        ///         type: string, # Required. The type of the extension.
        ///         typeHandlerVersion: string, # Optional. The version of script handler.
        ///         autoUpgradeMinorVersion: boolean, # Optional. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        ///         settings: AnyObject, # Optional. JSON formatted public settings for the extension.
        ///         protectedSettings: AnyObject, # Optional. The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. 
        ///         provisionAfterExtensions: [string], # Optional. Collection of extension names after which this extension needs to be provisioned.
        ///       }
        ///     ], # Optional. If specified, the extensions mentioned in this configuration will be installed on each node.
        ///     osDisk: {
        ///       ephemeralOSDiskSettings: {
        ///         placement: string, # Optional. This property can be used by user in the request to choose the location e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.
        ///       }, # Optional. Specifies the ephemeral Disk Settings for the operating system disk used by the compute node (VM).
        ///     }, # Optional. Settings for the operating system disk of the compute node (VM).
        ///   }, # Optional. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
        ///   resizeErrors: [
        ///     {
        ///       code: string, # Optional. An identifier for the Pool resize error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the Pool resize error, intended to be suitable for display in a user interface.
        ///       values: [
        ///         {
        ///           name: string, # Optional. The name in the name-value pair.
        ///           value: string, # Optional. The value in the name-value pair.
        ///         }
        ///       ], # Optional. A list of additional error details related to the Pool resize error.
        ///     }
        ///   ], # Optional. This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady.
        ///   currentDedicatedNodes: number, # Optional. The number of dedicated Compute Nodes currently in the Pool.
        ///   currentLowPriorityNodes: number, # Optional. Spot/Low-priority Compute Nodes which have been preempted are included in this count.
        ///   targetDedicatedNodes: number, # Optional. The desired number of dedicated Compute Nodes in the Pool.
        ///   targetLowPriorityNodes: number, # Optional. The desired number of Spot/Low-priority Compute Nodes in the Pool.
        ///   enableAutoScale: boolean, # Optional. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.
        ///   autoScaleFormula: string, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleEvaluationInterval: string (duration ISO 8601 Format), # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleRun: {
        ///     timestamp: string (ISO 8601 Format), # Required. The time at which the autoscale formula was last evaluated.
        ///     results: string, # Optional. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        ///     error: {
        ///       code: string, # Optional. An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the autoscale error, intended to be suitable for display in a user interface.
        ///       values: [NameValuePair], # Optional. A list of additional error details related to the autoscale error.
        ///     }, # Optional. An error that occurred when executing or evaluating a Pool autoscale formula.
        ///   }, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   enableInterNodeCommunication: boolean, # Optional. This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool.
        ///   networkConfiguration: {
        ///     subnetId: string, # Optional. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn&apos;t have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The &apos;MicrosoftAzureBatch&apos; service principal must have the &apos;Classic Virtual Machine Contributor&apos; Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks (&apos;Microsoft.Network/virtualNetworks&apos;) are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        ///     dynamicVNetAssignmentScope: &quot;none&quot; | &quot;job&quot;, # Optional. The scope of dynamic vnet assignment.
        ///     endpointConfiguration: {
        ///       inboundNATPools: [
        ///         {
        ///           name: string, # Required. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
        ///           protocol: &quot;tcp&quot; | &quot;udp&quot;, # Required. The protocol of the endpoint.
        ///           backendPort: number, # Required. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeStart: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeEnd: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           networkSecurityGroupRules: [
        ///             {
        ///               priority: number, # Required. Priorities within a Pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
        ///               access: &quot;allow&quot; | &quot;deny&quot;, # Required. The action that should be taken for a specified IP address, subnet range or tag.
        ///               sourceAddressPrefix: string, # Required. Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
        ///               sourcePortRanges: [string], # Optional. Valid values are &apos;*&apos; (for all ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0 to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port). If any other values are provided the request fails with HTTP status code 400. The default value is &apos;*&apos;.
        ///             }
        ///           ], # Optional. The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
        ///         }
        ///       ], # Required. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        ///     }, # Optional. Pool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
        ///     publicIPAddressConfiguration: {
        ///       provision: &quot;batchmanaged&quot; | &quot;usermanaged&quot; | &quot;nopublicipaddresses&quot;, # Optional. The default value is BatchManaged.
        ///       ipAddressIds: [string], # Optional. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        ///     }, # Optional. Public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
        ///   }, # Optional. The network configuration for a Pool.
        ///   startTask: {
        ///     commandLine: string, # Required. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using &quot;cmd /c MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        ///     containerSettings: {
        ///       containerRunOptions: string, # Optional. These additional options are supplied as arguments to the &quot;docker create&quot; command, in addition to those controlled by the Batch Service.
        ///       imageName: string, # Required. This is the full Image reference, as would be specified to &quot;docker pull&quot;. If no tag is provided as part of the Image name, the tag &quot;:latest&quot; is used as a default.
        ///       registry: ContainerRegistry, # Optional. This setting can be omitted if was already provided at Pool creation.
        ///       workingDirectory: &quot;taskWorkingDirectory&quot; | &quot;containerImageDefault&quot;, # Optional. The default is &apos;taskWorkingDirectory&apos;.
        ///     }, # Optional. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
        ///         storageContainerUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access.
        ///         httpUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access.
        ///         blobPrefix: string, # Optional. The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        ///         filePath: string, # Optional. If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task&apos;s working directory (for example by using &apos;..&apos;).
        ///         fileMode: string, # Optional. This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }
        ///     ], # Optional. Files listed under this element are located in the Task&apos;s working directory.
        ///     environmentSettings: [
        ///       {
        ///         name: string, # Required. The name of the environment variable.
        ///         value: string, # Optional. The value of the environment variable.
        ///       }
        ///     ], # Optional. A list of environment variable settings for the StartTask.
        ///     userIdentity: {
        ///       username: string, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///       autoUser: {
        ///         scope: &quot;task&quot; | &quot;pool&quot;, # Optional. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.
        ///         elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       }, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///     }, # Optional. If omitted, the Task runs as a non-administrative user unique to the Task.
        ///     maxTaskRetryCount: number, # Optional. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)
        ///     waitForSuccess: boolean, # Optional. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        ///   }, # Optional. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
        ///   certificateReferences: [
        ///     {
        ///       thumbprint: string, # Required. The thumbprint of the Certificate.
        ///       thumbprintAlgorithm: string, # Required. The algorithm with which the thumbprint is associated. This must be sha1.
        ///       storeLocation: &quot;currentuser&quot; | &quot;localmachine&quot;, # Optional. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///       storeName: string, # Optional. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
        ///       visibility: [&quot;starttask&quot; | &quot;task&quot; | &quot;remoteuser&quot;], # Optional. You can specify more than one visibility in this collection. The default is all Accounts.
        ///     }
        ///   ], # Optional. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///   applicationPackageReferences: [
        ///     {
        ///       applicationId: string, # Required. The ID of the application to deploy.
        ///       version: string, # Optional. If this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error.
        ///     }
        ///   ], # Optional. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
        ///   applicationLicenses: [string], # Optional. The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.
        ///   taskSlotsPerNode: number, # Optional. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        ///   taskSchedulingPolicy: {
        ///     nodeFillType: &quot;spread&quot; | &quot;pack&quot;, # Required. If not specified, the default is spread.
        ///   }, # Optional. If not specified, the default is spread.
        ///   userAccounts: [
        ///     {
        ///       name: string, # Required. The name of the user Account.
        ///       password: string, # Required. The password for the user Account.
        ///       elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       linuxUserConfiguration: {
        ///         uid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
        ///         gid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
        ///         sshPrivateKey: string, # Optional. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool&apos;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&apos;s .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user&apos;s .ssh directory is done).
        ///       }, # Optional. This property is ignored if specified on a Windows Pool. If not specified, the user is created with the default options.
        ///       windowsUserConfiguration: {
        ///         loginMode: &quot;batch&quot; | &quot;interactive&quot;, # Optional. The default value for VirtualMachineConfiguration Pools is &apos;batch&apos; and for CloudServiceConfiguration Pools is &apos;interactive&apos;.
        ///       }, # Optional. This property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
        ///     }
        ///   ], # Optional. The list of user Accounts to be created on each Compute Node in the Pool.
        ///   metadata: [
        ///     {
        ///       name: string, # Required. The name of the metadata item.
        ///       value: string, # Required. The value of the metadata item.
        ///     }
        ///   ], # Optional. A list of name-value pairs associated with the Pool as metadata.
        ///   stats: {
        ///     url: string, # Required. The URL for the statistics.
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     usageStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       dedicatedCoreTime: string (duration ISO 8601 Format), # Required. The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        ///     }, # Optional. Statistics related to Pool usage information.
        ///     resourceStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       avgCPUPercentage: number, # Required. The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        ///       avgMemoryGiB: number, # Required. The average memory usage in GiB across all Compute Nodes in the Pool.
        ///       peakMemoryGiB: number, # Required. The peak memory usage in GiB across all Compute Nodes in the Pool.
        ///       avgDiskGiB: number, # Required. The average used disk space in GiB across all Compute Nodes in the Pool.
        ///       peakDiskGiB: number, # Required. The peak used disk space in GiB across all Compute Nodes in the Pool.
        ///       diskReadIOps: number, # Required. The total number of disk read operations across all Compute Nodes in the Pool.
        ///       diskWriteIOps: number, # Required. The total number of disk write operations across all Compute Nodes in the Pool.
        ///       diskReadGiB: number, # Required. The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        ///       diskWriteGiB: number, # Required. The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        ///       networkReadGiB: number, # Required. The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        ///       networkWriteGiB: number, # Required. The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        ///     }, # Optional. Statistics related to resource consumption by Compute Nodes in a Pool.
        ///   }, # Optional. This property is populated only if the CloudPool was retrieved with an expand clause including the &apos;stats&apos; attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        ///   mountConfiguration: [
        ///     {
        ///       azureBlobFileSystemConfiguration: {
        ///         accountName: string, # Required. The Azure Storage Account name.
        ///         containerName: string, # Required. The Azure Blob Storage Container name.
        ///         accountKey: string, # Optional. This property is mutually exclusive with both sasKey and identity; exactly one must be specified.
        ///         sasKey: string, # Optional. This property is mutually exclusive with both accountKey and identity; exactly one must be specified.
        ///         blobfuseOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. This property is mutually exclusive with both accountKey and sasKey; exactly one must be specified.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       nfsMountConfiguration: {
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       cifsMountConfiguration: {
        ///         username: string, # Required. The user to use for authentication against the CIFS file system.
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         password: string, # Required. The password to use for authentication against the CIFS file system.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       azureFileShareConfiguration: {
        ///         accountName: string, # Required. The Azure Storage account name.
        ///         azureFileUrl: string, # Required. This is of the form &apos;https://{account}.file.core.windows.net/&apos;.
        ///         accountKey: string, # Required. The Azure Storage account key.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///     }
        ///   ], # Optional. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        ///   identity: {
        ///     type: &quot;UserAssigned&quot; | &quot;None&quot;, # Required. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///     userAssignedIdentities: [
        ///       {
        ///         resourceId: string, # Required. The ARM resource id of the user assigned identity
        ///         clientId: string, # Optional. The client id of the user assigned identity.
        ///         principalId: string, # Optional. The principal id of the user assigned identity.
        ///       }
        ///     ], # Optional. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///   }, # Optional. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetPoolsAsync(string filter = null, string select = null, string expand = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            return GetPoolsImplementationAsync("PoolClient.GetPools", filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
        }

        private AsyncPageable<BinaryData> GetPoolsImplementationAsync(string diagnosticsScopeName, string filter, string select, string expand, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPoolsRequest(filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetPoolsNextPageRequest(nextLink, filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "odata.nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists all of the Pools in the specified Account. </summary>
        /// <param name="filter"> An OData $filter clause. For more information on constructing this filter, see https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools. </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="maxResults"> The maximum number of items to return in the response. A maximum of 1000 Pools can be returned. </param>
        /// <param name="timeout"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. </param>
        /// <param name="clientRequestId"> The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpDate"> The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPools and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// foreach (var data in client.GetPools())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetPools with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new BatchClient(credential).GetPoolClientClient("<batchUrl>", <2022-01-01.15.0>);
        /// 
        /// foreach (var data in client.GetPools("<filter>", "<select>", "<expand>", 1234, 1234, Guid.NewGuid(), true, DateTimeOffset.UtcNow))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("displayName").ToString());
        ///     Console.WriteLine(result.GetProperty("url").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("lastModified").ToString());
        ///     Console.WriteLine(result.GetProperty("creationTime").ToString());
        ///     Console.WriteLine(result.GetProperty("state").ToString());
        ///     Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
        ///     Console.WriteLine(result.GetProperty("allocationState").ToString());
        ///     Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
        ///     Console.WriteLine(result.GetProperty("vmSize").ToString());
        ///     Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osFamily").ToString());
        ///     Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
        ///     Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
        ///     Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
        ///     Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
        ///     Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
        ///     Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
        ///     Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
        ///     Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
        ///     Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
        ///     Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
        ///     Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
        ///     Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprint").ToString());
        ///     Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprintAlgorithm").ToString());
        ///     Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeLocation").ToString());
        ///     Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeName").ToString());
        ///     Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("visibility")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
        ///     Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
        ///     Console.WriteLine(result.GetProperty("applicationLicenses")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
        ///     Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
        ///     Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
        ///     Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
        ///     Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
        ///     Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
        ///     Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
        ///     Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PoolListResultValue</c>:
        /// <code>{
        ///   id: string, # Optional. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case).
        ///   displayName: string, # Optional. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
        ///   url: string, # Optional. The URL of the Pool.
        ///   eTag: string, # Optional. This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime.
        ///   lastModified: string (ISO 8601 Format), # Optional. This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state.
        ///   creationTime: string (ISO 8601 Format), # Optional. The creation time of the Pool.
        ///   state: &quot;active&quot; | &quot;deleting&quot;, # Optional. The current state of the Pool.
        ///   stateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current state.
        ///   allocationState: &quot;steady&quot; | &quot;resizing&quot; | &quot;stopping&quot;, # Optional. Whether the Pool is resizing.
        ///   allocationStateTransitionTime: string (ISO 8601 Format), # Optional. The time at which the Pool entered its current allocation state.
        ///   vmSize: string, # Optional. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        ///   cloudServiceConfiguration: {
        ///     osFamily: string, # Required. Possible values are:
        /// 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1.
        /// 3 - OS Family 3, equivalent to Windows Server 2012.
        /// 4 - OS Family 4, equivalent to Windows Server 2012 R2.
        /// 5 - OS Family 5, equivalent to Windows Server 2016.
        /// 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
        ///     osVersion: string, # Optional. The default value is * which specifies the latest operating system version for the specified OS family.
        ///   }, # Optional. This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to &apos;UserSubscription&apos;.
        ///   virtualMachineConfiguration: {
        ///     imageReference: {
        ///       publisher: string, # Optional. For example, Canonical or MicrosoftWindowsServer.
        ///       offer: string, # Optional. For example, UbuntuServer or WindowsServer.
        ///       sku: string, # Optional. For example, 18.04-LTS or 2019-Datacenter.
        ///       version: string, # Optional. A value of &apos;latest&apos; can be specified to select the latest version of an Image. If omitted, the default is &apos;latest&apos;.
        ///       virtualMachineImageId: string, # Optional. This property is mutually exclusive with other ImageReference properties. The Shared Image Gallery Image must have replicas in the same region and must be in the same subscription as the Azure Batch account. If the image version is not specified in the imageId, the latest version will be used. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
        ///       exactVersion: string, # Optional. The specific version of the platform image or marketplace image used to create the node. This read-only field differs from &apos;version&apos; only if the value specified for &apos;version&apos; when the pool was created was &apos;latest&apos;.
        ///     }, # Required. A reference to an Azure Virtual Machines Marketplace Image or a Shared Image Gallery Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the &apos;List Supported Images&apos; operation.
        ///     nodeAgentSKUId: string, # Required. The Batch Compute Node agent is a program that runs on each Compute Node in the Pool, and provides the command-and-control interface between the Compute Node and the Batch service. There are different implementations of the Compute Node agent, known as SKUs, for different operating systems. You must specify a Compute Node agent SKU which matches the selected Image reference. To get the list of supported Compute Node agent SKUs along with their list of verified Image references, see the &apos;List supported Compute Node agent SKUs&apos; operation.
        ///     windowsConfiguration: {
        ///       enableAutomaticUpdates: boolean, # Optional. If omitted, the default value is true.
        ///     }, # Optional. This property must not be specified if the imageReference property specifies a Linux OS Image.
        ///     dataDisks: [
        ///       {
        ///         lun: number, # Required. The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
        ///         caching: &quot;none&quot; | &quot;readonly&quot; | &quot;readwrite&quot;, # Optional. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        ///         diskSizeGB: number, # Required. The initial disk size in gigabytes.
        ///         storageAccountType: &quot;standard_lrs&quot; | &quot;premium_lrs&quot;, # Optional. If omitted, the default is &quot;standard_lrs&quot;.
        ///       }
        ///     ], # Optional. This property must be specified if the Compute Nodes in the Pool need to have empty data disks attached to them. This cannot be updated. Each Compute Node gets its own disk (the disk is not a file share). Existing disks cannot be attached, each attached disk is empty. When the Compute Node is removed from the Pool, the disk and all data associated with it is also deleted. The disk is not formatted after being attached, it must be formatted before use - for more information see https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux and https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
        ///     licenseType: string, # Optional. This only applies to Images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the Compute Nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        ///     containerConfiguration: {
        ///       type: string, # Required. The container technology to be used.
        ///       containerImageNames: [string], # Optional. This is the full Image reference, as would be specified to &quot;docker pull&quot;. An Image will be sourced from the default Docker registry unless the Image is fully qualified with an alternative registry.
        ///       containerRegistries: [
        ///         {
        ///           username: string, # Optional. The user name to log into the registry server.
        ///           password: string, # Optional. The password to log into the registry server.
        ///           registryServer: string, # Optional. If omitted, the default is &quot;docker.io&quot;.
        ///           identityReference: {
        ///             resourceId: string, # Optional. The ARM resource id of the user assigned identity.
        ///           }, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///         }
        ///       ], # Optional. If any Images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
        ///     }, # Optional. If specified, setup is performed on each Compute Node in the Pool to allow Tasks to run in containers. All regular Tasks and Job manager Tasks run on this Pool must specify the containerSettings property, and all other Tasks may specify it.
        ///     diskEncryptionConfiguration: {
        ///       targets: [&quot;osdisk&quot; | &quot;temporarydisk&quot;], # Optional. If omitted, no disks on the compute nodes in the pool will be encrypted. On Linux pool, only &quot;TemporaryDisk&quot; is supported; on Windows pool, &quot;OsDisk&quot; and &quot;TemporaryDisk&quot; must be specified.
        ///     }, # Optional. If specified, encryption is performed on each node in the pool during node provisioning.
        ///     nodePlacementConfiguration: {
        ///       policy: &quot;regional&quot; | &quot;zonal&quot;, # Optional. Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy.
        ///     }, # Optional. This configuration will specify rules on how nodes in the pool will be physically allocated.
        ///     extensions: [
        ///       {
        ///         name: string, # Required. The name of the virtual machine extension.
        ///         publisher: string, # Required. The name of the extension handler publisher.
        ///         type: string, # Required. The type of the extension.
        ///         typeHandlerVersion: string, # Optional. The version of script handler.
        ///         autoUpgradeMinorVersion: boolean, # Optional. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        ///         settings: AnyObject, # Optional. JSON formatted public settings for the extension.
        ///         protectedSettings: AnyObject, # Optional. The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. 
        ///         provisionAfterExtensions: [string], # Optional. Collection of extension names after which this extension needs to be provisioned.
        ///       }
        ///     ], # Optional. If specified, the extensions mentioned in this configuration will be installed on each node.
        ///     osDisk: {
        ///       ephemeralOSDiskSettings: {
        ///         placement: string, # Optional. This property can be used by user in the request to choose the location e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements.
        ///       }, # Optional. Specifies the ephemeral Disk Settings for the operating system disk used by the compute node (VM).
        ///     }, # Optional. Settings for the operating system disk of the compute node (VM).
        ///   }, # Optional. This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified.
        ///   resizeTimeout: string (duration ISO 8601 Format), # Optional. This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes.
        ///   resizeErrors: [
        ///     {
        ///       code: string, # Optional. An identifier for the Pool resize error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the Pool resize error, intended to be suitable for display in a user interface.
        ///       values: [
        ///         {
        ///           name: string, # Optional. The name in the name-value pair.
        ///           value: string, # Optional. The value in the name-value pair.
        ///         }
        ///       ], # Optional. A list of additional error details related to the Pool resize error.
        ///     }
        ///   ], # Optional. This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady.
        ///   currentDedicatedNodes: number, # Optional. The number of dedicated Compute Nodes currently in the Pool.
        ///   currentLowPriorityNodes: number, # Optional. Spot/Low-priority Compute Nodes which have been preempted are included in this count.
        ///   targetDedicatedNodes: number, # Optional. The desired number of dedicated Compute Nodes in the Pool.
        ///   targetLowPriorityNodes: number, # Optional. The desired number of Spot/Low-priority Compute Nodes in the Pool.
        ///   enableAutoScale: boolean, # Optional. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false.
        ///   autoScaleFormula: string, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleEvaluationInterval: string (duration ISO 8601 Format), # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   autoScaleRun: {
        ///     timestamp: string (ISO 8601 Format), # Required. The time at which the autoscale formula was last evaluated.
        ///     results: string, # Optional. Each variable value is returned in the form $variable=value, and variables are separated by semicolons.
        ///     error: {
        ///       code: string, # Optional. An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically.
        ///       message: string, # Optional. A message describing the autoscale error, intended to be suitable for display in a user interface.
        ///       values: [NameValuePair], # Optional. A list of additional error details related to the autoscale error.
        ///     }, # Optional. An error that occurred when executing or evaluating a Pool autoscale formula.
        ///   }, # Optional. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true.
        ///   enableInterNodeCommunication: boolean, # Optional. This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool.
        ///   networkConfiguration: {
        ///     subnetId: string, # Optional. The virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn&apos;t have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The &apos;MicrosoftAzureBatch&apos; service principal must have the &apos;Classic Virtual Machine Contributor&apos; Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks (&apos;Microsoft.Network/virtualNetworks&apos;) are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
        ///     dynamicVNetAssignmentScope: &quot;none&quot; | &quot;job&quot;, # Optional. The scope of dynamic vnet assignment.
        ///     endpointConfiguration: {
        ///       inboundNATPools: [
        ///         {
        ///           name: string, # Required. The name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
        ///           protocol: &quot;tcp&quot; | &quot;udp&quot;, # Required. The protocol of the endpoint.
        ///           backendPort: number, # Required. This must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeStart: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           frontendPortRangeEnd: number, # Required. Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
        ///           networkSecurityGroupRules: [
        ///             {
        ///               priority: number, # Required. Priorities within a Pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400.
        ///               access: &quot;allow&quot; | &quot;deny&quot;, # Required. The action that should be taken for a specified IP address, subnet range or tag.
        ///               sourceAddressPrefix: string, # Required. Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400.
        ///               sourcePortRanges: [string], # Optional. Valid values are &apos;*&apos; (for all ports 0 - 65535), a specific port (i.e. 22), or a port range (i.e. 100-200). The ports must be in the range of 0 to 65535. Each entry in this collection must not overlap any other entry (either a range or an individual port). If any other values are provided the request fails with HTTP status code 400. The default value is &apos;*&apos;.
        ///             }
        ///           ], # Optional. The maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
        ///         }
        ///       ], # Required. The maximum number of inbound NAT Pools per Batch Pool is 5. If the maximum number of inbound NAT Pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
        ///     }, # Optional. Pool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
        ///     publicIPAddressConfiguration: {
        ///       provision: &quot;batchmanaged&quot; | &quot;usermanaged&quot; | &quot;nopublicipaddresses&quot;, # Optional. The default value is BatchManaged.
        ///       ipAddressIds: [string], # Optional. The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/Low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}.
        ///     }, # Optional. Public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
        ///   }, # Optional. The network configuration for a Pool.
        ///   startTask: {
        ///     commandLine: string, # Required. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using &quot;cmd /c MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        ///     containerSettings: {
        ///       containerRunOptions: string, # Optional. These additional options are supplied as arguments to the &quot;docker create&quot; command, in addition to those controlled by the Batch Service.
        ///       imageName: string, # Required. This is the full Image reference, as would be specified to &quot;docker pull&quot;. If no tag is provided as part of the Image name, the tag &quot;:latest&quot; is used as a default.
        ///       registry: ContainerRegistry, # Optional. This setting can be omitted if was already provided at Pool creation.
        ///       workingDirectory: &quot;taskWorkingDirectory&quot; | &quot;containerImageDefault&quot;, # Optional. The default is &apos;taskWorkingDirectory&apos;.
        ///     }, # Optional. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
        ///     resourceFiles: [
        ///       {
        ///         autoStorageContainerName: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
        ///         storageContainerUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access.
        ///         httpUrl: string, # Optional. The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access.
        ///         blobPrefix: string, # Optional. The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
        ///         filePath: string, # Optional. If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the Task&apos;s working directory (for example by using &apos;..&apos;).
        ///         fileMode: string, # Optional. This property applies only to files being downloaded to Linux Compute Nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows Compute Node. If this property is not specified for a Linux Compute Node, then a default value of 0770 is applied to the file.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. The reference to a user assigned identity associated with the Batch pool which a compute node will use.
        ///       }
        ///     ], # Optional. Files listed under this element are located in the Task&apos;s working directory.
        ///     environmentSettings: [
        ///       {
        ///         name: string, # Required. The name of the environment variable.
        ///         value: string, # Optional. The value of the environment variable.
        ///       }
        ///     ], # Optional. A list of environment variable settings for the StartTask.
        ///     userIdentity: {
        ///       username: string, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///       autoUser: {
        ///         scope: &quot;task&quot; | &quot;pool&quot;, # Optional. The default value is pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by StartTasks.
        ///         elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       }, # Optional. The userName and autoUser properties are mutually exclusive; you must specify one but not both.
        ///     }, # Optional. If omitted, the Task runs as a non-administrative user unique to the Task.
        ///     maxTaskRetryCount: number, # Optional. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)
        ///     waitForSuccess: boolean, # Optional. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true.
        ///   }, # Optional. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask.
        ///   certificateReferences: [
        ///     {
        ///       thumbprint: string, # Required. The thumbprint of the Certificate.
        ///       thumbprintAlgorithm: string, # Required. The algorithm with which the thumbprint is associated. This must be sha1.
        ///       storeLocation: &quot;currentuser&quot; | &quot;localmachine&quot;, # Optional. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///       storeName: string, # Optional. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
        ///       visibility: [&quot;starttask&quot; | &quot;task&quot; | &quot;remoteuser&quot;], # Optional. You can specify more than one visibility in this collection. The default is all Accounts.
        ///     }
        ///   ], # Optional. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///   applicationPackageReferences: [
        ///     {
        ///       applicationId: string, # Required. The ID of the application to deploy.
        ///       version: string, # Optional. If this is omitted on a Pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a Task, and no default version is specified for this application, the Task fails with a pre-processing error.
        ///     }
        ///   ], # Optional. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool.
        ///   applicationLicenses: [string], # Optional. The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail.
        ///   taskSlotsPerNode: number, # Optional. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
        ///   taskSchedulingPolicy: {
        ///     nodeFillType: &quot;spread&quot; | &quot;pack&quot;, # Required. If not specified, the default is spread.
        ///   }, # Optional. If not specified, the default is spread.
        ///   userAccounts: [
        ///     {
        ///       name: string, # Required. The name of the user Account.
        ///       password: string, # Required. The password for the user Account.
        ///       elevationLevel: &quot;nonadmin&quot; | &quot;admin&quot;, # Optional. The default value is nonAdmin.
        ///       linuxUserConfiguration: {
        ///         uid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
        ///         gid: number, # Optional. The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
        ///         sshPrivateKey: string, # Optional. The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between Compute Nodes in a Linux Pool when the Pool&apos;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&apos;s .ssh directory. If not specified, password-less SSH is not configured between Compute Nodes (no modification of the user&apos;s .ssh directory is done).
        ///       }, # Optional. This property is ignored if specified on a Windows Pool. If not specified, the user is created with the default options.
        ///       windowsUserConfiguration: {
        ///         loginMode: &quot;batch&quot; | &quot;interactive&quot;, # Optional. The default value for VirtualMachineConfiguration Pools is &apos;batch&apos; and for CloudServiceConfiguration Pools is &apos;interactive&apos;.
        ///       }, # Optional. This property can only be specified if the user is on a Windows Pool. If not specified and on a Windows Pool, the user is created with the default options.
        ///     }
        ///   ], # Optional. The list of user Accounts to be created on each Compute Node in the Pool.
        ///   metadata: [
        ///     {
        ///       name: string, # Required. The name of the metadata item.
        ///       value: string, # Required. The value of the metadata item.
        ///     }
        ///   ], # Optional. A list of name-value pairs associated with the Pool as metadata.
        ///   stats: {
        ///     url: string, # Required. The URL for the statistics.
        ///     startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///     lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///     usageStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       dedicatedCoreTime: string (duration ISO 8601 Format), # Required. The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool.
        ///     }, # Optional. Statistics related to Pool usage information.
        ///     resourceStats: {
        ///       startTime: string (ISO 8601 Format), # Required. The start time of the time range covered by the statistics.
        ///       lastUpdateTime: string (ISO 8601 Format), # Required. The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
        ///       avgCPUPercentage: number, # Required. The average CPU usage across all Compute Nodes in the Pool (percentage per node).
        ///       avgMemoryGiB: number, # Required. The average memory usage in GiB across all Compute Nodes in the Pool.
        ///       peakMemoryGiB: number, # Required. The peak memory usage in GiB across all Compute Nodes in the Pool.
        ///       avgDiskGiB: number, # Required. The average used disk space in GiB across all Compute Nodes in the Pool.
        ///       peakDiskGiB: number, # Required. The peak used disk space in GiB across all Compute Nodes in the Pool.
        ///       diskReadIOps: number, # Required. The total number of disk read operations across all Compute Nodes in the Pool.
        ///       diskWriteIOps: number, # Required. The total number of disk write operations across all Compute Nodes in the Pool.
        ///       diskReadGiB: number, # Required. The total amount of data in GiB of disk reads across all Compute Nodes in the Pool.
        ///       diskWriteGiB: number, # Required. The total amount of data in GiB of disk writes across all Compute Nodes in the Pool.
        ///       networkReadGiB: number, # Required. The total amount of data in GiB of network reads across all Compute Nodes in the Pool.
        ///       networkWriteGiB: number, # Required. The total amount of data in GiB of network writes across all Compute Nodes in the Pool.
        ///     }, # Optional. Statistics related to resource consumption by Compute Nodes in a Pool.
        ///   }, # Optional. This property is populated only if the CloudPool was retrieved with an expand clause including the &apos;stats&apos; attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
        ///   mountConfiguration: [
        ///     {
        ///       azureBlobFileSystemConfiguration: {
        ///         accountName: string, # Required. The Azure Storage Account name.
        ///         containerName: string, # Required. The Azure Blob Storage Container name.
        ///         accountKey: string, # Optional. This property is mutually exclusive with both sasKey and identity; exactly one must be specified.
        ///         sasKey: string, # Optional. This property is mutually exclusive with both accountKey and identity; exactly one must be specified.
        ///         blobfuseOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         identityReference: ComputeNodeIdentityReference, # Optional. This property is mutually exclusive with both accountKey and sasKey; exactly one must be specified.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       nfsMountConfiguration: {
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       cifsMountConfiguration: {
        ///         username: string, # Required. The user to use for authentication against the CIFS file system.
        ///         source: string, # Required. The URI of the file system to mount.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///         password: string, # Required. The password to use for authentication against the CIFS file system.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///       azureFileShareConfiguration: {
        ///         accountName: string, # Required. The Azure Storage account name.
        ///         azureFileUrl: string, # Required. This is of the form &apos;https://{account}.file.core.windows.net/&apos;.
        ///         accountKey: string, # Required. The Azure Storage account key.
        ///         relativeMountPath: string, # Required. All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        ///         mountOptions: string, # Optional. These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux.
        ///       }, # Optional. This property is mutually exclusive with all other properties.
        ///     }
        ///   ], # Optional. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        ///   identity: {
        ///     type: &quot;UserAssigned&quot; | &quot;None&quot;, # Required. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///     userAssignedIdentities: [
        ///       {
        ///         resourceId: string, # Required. The ARM resource id of the user assigned identity
        ///         clientId: string, # Optional. The client id of the user assigned identity.
        ///         principalId: string, # Optional. The principal id of the user assigned identity.
        ///       }
        ///     ], # Optional. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        ///   }, # Optional. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetPools(string filter = null, string select = null, string expand = null, int? maxResults = null, int? timeout = null, Guid? clientRequestId = null, bool? returnClientRequestId = null, DateTimeOffset? ocpDate = null, RequestContext context = null)
        {
            return GetPoolsImplementation("PoolClient.GetPools", filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
        }

        private Pageable<BinaryData> GetPoolsImplementation(string diagnosticsScopeName, string filter, string select, string expand, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPoolsRequest(filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context)
                        : CreateGetPoolsNextPageRequest(nextLink, filter, select, expand, maxResults, timeout, clientRequestId, returnClientRequestId, ocpDate, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "odata.nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetUsageMetricsRequest(DateTimeOffset? startTime, DateTimeOffset? endTime, string filter, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/poolusagemetrics", false);
            if (startTime != null)
            {
                uri.AppendQuery("starttime", startTime.Value, "O", true);
            }
            if (endTime != null)
            {
                uri.AppendQuery("endtime", endTime.Value, "O", true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (maxResults != null)
            {
                uri.AppendQuery("maxresults", maxResults.Value, true);
            }
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAllLifetimeStatisticsRequest(int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/lifetimepoolstats", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateAddRequest(RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetPoolsRequest(string filter, string select, string expand, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (maxResults != null)
            {
                uri.AppendQuery("maxresults", maxResults.Value, true);
            }
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string poolId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateExistsRequest(string poolId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200404);
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateGetPoolRequest(string poolId, string select, string expand, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreatePatchRequest(string poolId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDisableAutoScaleRequest(string poolId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/disableautoscale", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateEnableAutoScaleRequest(string poolId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/enableautoscale", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateEvaluateAutoScaleRequest(string poolId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/evaluateautoscale", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateResizeRequest(string poolId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/resize", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateStopResizeRequest(string poolId, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/stopresize", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            return message;
        }

        internal HttpMessage CreateUpdatePropertiesRequest(string poolId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/updateproperties", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRemoveNodesRequest(string poolId, RequestContent content, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestConditions requestConditions, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/removenodes", false);
            if (timeout != null)
            {
                uri.AppendQuery("timeout", timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            if (requestConditions != null)
            {
                request.Headers.Add(requestConditions, "R");
            }
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetUsageMetricsNextPageRequest(string nextLink, DateTimeOffset? startTime, DateTimeOffset? endTime, string filter, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPoolsNextPageRequest(string nextLink, string filter, string select, string expand, int? maxResults, int? timeout, Guid? clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpDate, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId.Value);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
        private static ResponseClassifier _responseClassifier200404;
        private static ResponseClassifier ResponseClassifier200404 => _responseClassifier200404 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 404 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
